<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="Archivable">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>-0.5</Z>
				<R00>0</R00>
				<R01>0</R01>
				<R02>1</R02>
				<R10>1</R10>
				<R11>0</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>1</R21>
				<R22>0</R22>
			</CoordinateFrame>
			<string name="Name">DeleteTool</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=59102685</url></Content>
		</Properties>
		<Item class="Part" referent="RBX1">
			<Properties>
				<bool name="Anchored">false</bool>
				<bool name="Archivable">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">199</int>
				<CoordinateFrame name="CFrame">
					<X>-12.0932655</X>
					<Y>5.09790707</Y>
					<Z>-10.9329929</Z>
					<R00>0.815435171</R00>
					<R01>0.578847528</R01>
					<R02>-0.000649310299</R02>
					<R10>0.000796274282</R10>
					<R11>-3.93885717e-021</R11>
					<R12>0.999999642</R12>
					<R20>0.578847408</R20>
					<R21>-0.81543535</R21>
					<R22>-0.000460921437</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0.400000006</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>0.800000012</Y>
					<Z>3</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX2">
				<Properties>
					<bool name="Archivable">true</bool>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=16198309</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.20000005</X>
						<Y>1.20000005</Y>
						<Z>1.20000005</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=16198294</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX3">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Looped">false</bool>
					<string name="Name">Sound</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/Asset/?ID=12135982</url></Content>
					<float name="Volume">0.699999988</float>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX4">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Model Delete Local</string>
				<ProtectedString name="Source">function waitForChild(instance, name)
	while not instance:FindFirstChild(name) do
		instance.ChildAdded:wait()
	end
end


local Tool = script.Parent

enabled = true
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/delete_sel.png&quot;)

local cluster = nil

local selectionBox
local currentSelection
local currentSelectionColors = {}
local selectionLasso

local deleteDistance = 100
local player = nil
--local playerModel = nil
local playerModel = game.Workspace
local buildingPlate = nil

local highlight = false

local megaClusterSelectionBox = Instance.new(&quot;Part&quot;)
megaClusterSelectionBox.FormFactor = &quot;Custom&quot;
megaClusterSelectionBox.Size = Vector3.new(4, 4, 4) -- a little thicker than 4x4x4 unit clusterpart; just so selection box is more easily seen
megaClusterSelectionBox.Transparency = 1
megaClusterSelectionBox.Anchored = true
megaClusterSelectionBox.CanCollide = false
megaClusterSelectionBox.Parent = nil

waitForChild(Tool, &quot;IsRestricted&quot;)
local isRestricted = Tool.IsRestricted.Value

waitForChild(Tool, &quot;AutoWedgeClusterParts&quot;)
local autoWedgeClusterParts = Tool.AutoWedgeClusterParts.Value

function hint(label)

	-- Pass in a string, it shows a top hint.  (Replaces previous hint, if exists)
	_player = game.Players:GetPlayerFromCharacter(Tool.Parent)
	if(_player ~= nil and _player.PlayerGui:FindFirstChild(&quot;topHint&quot;)~=nil) then
		local topHint = _player.PlayerGui.topHint
		topHint.Add.Label.Value = label
		topHint.Add.Width.Value = 3 -- widest width
		topHint.Add.Time.Value = 5
		topHint.Add.Disabled = true
		topHint.Add.Disabled = false
	end

end

function canDeleteObject(part)
	-- let them delete anything that they created *or* anything on their baseplate
	return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; deleteDistance and (isChildOfMyModel(part) or partInBounds(part))
end

-- For Restricting Stamper Tool (isRestricted)
function inBounds(part)

	if part == nil then return false end

	if part:IsA(&quot;Part&quot;) or part:IsA(&quot;WedgePart&quot;) or part:IsA(&quot;TrussPart&quot;) then
		if not partInBounds(part) then return false end
	elseif part:IsA(&quot;Model&quot;) then
		local primPart = object.PrimaryPart
		if not partInBounds(primPart) then return false end
	end

	return true

end

function partInBounds(part)

	local xOne = buildingPlate.Position.x + buildingPlate.Size.x/2
	local xTwo = buildingPlate.Position.x - buildingPlate.Size.x/2
	local zOne = buildingPlate.Position.z + buildingPlate.Size.z/2
	local zTwo = buildingPlate.Position.z - buildingPlate.Size.z/2

	if part.Position.x &gt; xOne or part.Position.x &lt; xTwo then return false end
	if part.Position.z &gt; zOne or part.Position.z &lt; zTwo then return false end

	return true

end


function findModel(part)
	while part ~= nil do
		if part.className == &quot;Model&quot; and part.Name ~= playerModel.Name and part.Name ~= &quot;GarbageParts&quot; then
			return part
		elseif part.Name == playerModel.Name or part.Name == &quot;GarbageParts&quot; then
			return nil
		end
		part = part.Parent
	end

	return nil
end

function cleanOrphanedModel(parent)
	if not parent then return end
	if parent.className == &quot;Model&quot; then
		local children = parent:GetChildren()
		if #children == 0 and parent.Name ~= &quot;GarbageParts&quot; then
			local oldParent = parent.Parent
			parent:Remove()
			cleanOrphanedModel(oldParent)
		end
	end
end

function isChildOfMyModel(part)
		if not playerModel then return true end
		if playerModel:IsAncestorOf(part) then
			return true
		else return false end
end


-- Cyrion&apos;s auto-wedge fcn:
--turns column going down from coordinate x, y, z in cluster c into a wedge if possible
function makeWedge(x, y, z, c)
	-- bounds-check the call first
	if x &lt; 0 or y &lt; 0 or z &lt; 0 then return end
	local clusterMaxX, clusterMaxY, clusterMaxZ = c:GetTerrainSizeInCells()
	if x &gt;= clusterMaxX or y &gt;= clusterMaxY or z &gt;= clusterMaxZ then return end


	materiala, wedgea, rotationa = c:GetCellFull(x, y, z)
	materialb, wedgeb, rotationb = c:GetCellFull(x, y + 1, z)
	if materiala &gt; 0 and materialb == 0 then
		--wedges
		originalheight = y
		h = originalheight
		wedgetype = -1 --type of wedge used above this one
		material, wedge, rotation = c:GetCellFull(x, h, z)
		while (wedgetype ~= 0 or h &gt;= originalheight - 1) and h &gt;= 0 and material &gt; 0 do
			sides = {} --array of 4 surrounding coordinates, sides[n] has value 1 if coordinate is same height, 0 if lower
			surroundingsides = 0
			
			--check heights of 4 side coordinates
			
			--sides
			material0s, wedge0s, rotation0s = c:GetCellFull(x, h, z + 1)
			if material0s &gt; 0 then
				sides[0] = 1
				surroundingsides = surroundingsides + 1
			elseif material0s == 0 then
				sides[0] = 0
			end
			
			material1s, wedge1s, rotation1s = c:GetCellFull(x + 1, h, z)
			if material1s &gt; 0 then
				sides[1] = 1
				surroundingsides = surroundingsides + 1
			elseif material1s == 0 then
				sides[1] = 0
			end
			
			material2s, wedge2s, rotation2s = c:GetCellFull(x, h, z - 1)
			if material2s &gt; 0 then
				sides[2] = 1
				surroundingsides = surroundingsides + 1
			elseif material2s == 0 then
				sides[2] = 0
			end
			
			material3s, wedge3s, rotation3s = c:GetCellFull(x - 1, h, z)
			if material3s &gt; 0 then
				sides[3] = 1
				surroundingsides = surroundingsides + 1
			elseif material3s == 0 then
				sides[3] = 0
			end
			
			--corners
			surroundingcorners = 0
			corners = {} --an array of 4 corner coordinates, corners[n] has value 1 if coordinate is same height, 0 if lower
			
			material0c, wedge0c, rotation0c = c:GetCellFull(x - 1, h, z - 1)
			if material0c &gt; 0 then
				surroundingcorners = surroundingcorners + 1
				corners[0] = 1
			elseif material0c == 0 then
				corners[0] = 0
			end
		
			material1c, wedge1c, rotation1c = c:GetCellFull(x - 1, h, z + 1)
			if material1c &gt; 0 then
				surroundingcorners = surroundingcorners + 1
				corners[1] = 1
			elseif material1c == 0 then
				corners[1] = 0
			end
		
			material2c, wedge2c, rotation2c = c:GetCellFull(x + 1, h, z + 1)
			if material2c &gt; 0 then
				surroundingcorners = surroundingcorners + 1
				corners[2] = 1
			elseif material2c == 0 then
				corners[2] = 0
			end
		
			material3c, wedge3c, rotation3c = c:GetCellFull(x + 1, h, z - 1)
			if material3c &gt; 0 then
				surroundingcorners = surroundingcorners + 1
				corners[3] = 1
			elseif material3c == 0 then
				corners[3] = 0
			end
		
			--put in wedges
			--print(&quot;sides0: &quot;..sides[0])
			--print(&quot;sides1: &quot;..sides[1])
			--print(&quot;sides2: &quot;..sides[2])
			--print(&quot;sides3: &quot;..sides[3])
			if surroundingsides == 0 then
				c:SetCellFull(x, h, z, 1, 0, 0)
				wedgetype = 0
			elseif surroundingsides == 1 then
				if wedgetype == -1 then
					for n = 0, 3 do
						if sides[n] &gt;= 1 then
							c:SetCellFull(x, h, z, 1, 1, (n + 2) % 4)
							wedgetype = 1
						end
					end
				else
					c:SetCellFull(x, h, z, 1, 0, 0)
					wedgetype = 0
				end
			elseif surroundingsides == 2 then
				set = false
				for n = 0, 3 do
					if sides[n] == 0 then
						if sides[(n + 1) % 4] == 0 then
							set = true
							if wedgetype == -1 then
								if corners[n] &gt;= 1 then
									c:SetCellFull(x, h, z, 1, 2, (n + 1) % 4)
									wedgetype = 2
									lastorientation = n
								else
									c:SetCellFull(x, h, z, 1, 4, (n + 1) % 4)
									wedgetype = 4
									lastorientation = n
								end
							elseif wedgetype == 2 or wedgetype == 4 then
								c:SetCellFull(x, h, z, 1, 4, (lastorientation + 1) % 4)
								wedgetype = 4
							else
								c:SetCellFull(x, h, z, 1, 0, 0)
								wedgetype = 0
							end
						end
					end
				end	
				if set == false then
					c:SetCellFull(x, h, z, 1, 0, 0)
					wedgetype = 0
				end
			elseif surroundingsides == 3 then
				for n = 0, 3 do
					if sides[n] == 0 then
						if wedgetype == -1 and corners[n] &gt;= 1 and corners[(n + 3) % 4] &gt;= 1 then
								c:SetCellFull(x, h, z, 1, 1, n)
								wedgetype = 1
						elseif wedgetype == 2 or wedgetype == 4 then
							c:SetCellFull(x, h, z, 1, 4, (lastorientation + 1) % 4)
							wedgetype = 4
						else
							c:SetCellFull(x, h, z, 1, 0, 0)
							wedgetype = 0
						end
					end
				end
			elseif surroundingsides == 4 then
				if (wedgetype == -1 or wedgetype == 2 or wedgetype == 4) and surroundingcorners == 3 then
					for n = 0, 3 do
						if corners[n] == 0 then
							c:SetCellFull(x, h, z, 1, 3, (n + 3) % 4)
							wedgetype = 3
						end
					end
				else
					c:SetCellFull(x, h, z, 1, 0, 0)
					wedgetype = 0
				end
			end
			h = h - 1
			if h &gt;= 0 then
				material, wedge, rotation = c:GetCellFull(x, h, z)
			end
		end
	end
end


function on3dButton1Down(mouse)
	local part = mouse.Target

	if part == nil then 
		return
	elseif part:IsA(&quot;Cluster&quot;) then
		--local xCell, yCell, zCell = clusterTarget(Vector3.new(math.floor(mouse.Hit.X/4), math.floor(mouse.Hit.Y/4), math.floor(mouse.Hit.Z/4)), mouse.Hit - game.Workspace.CurrentCamera.CoordinateFrame.p, part)
		--if xCell ~= nil then
		local cellBox = getClusterAdjustedRaycast(mouse.Hit.p)
		if cellBox ~= nil then
			--part:SetCell(xCell, yCell, zCell, 0)
			--part:SetCell(math.floor(cellBox.p.X/4), math.floor(cellBox.p.Y/4), math.floor(cellBox.p.Z/4))
			
			--cluster:SetCellFull(cluster:WorldToCell(cellBox.p))
			local xCell, yCell, zCell = cluster:WorldToCell(cellBox.p)
			cluster:SetCellFull(xCell, yCell, zCell)
			if (autoWedgeClusterParts) then
				for xStep = -1, 1 do
					for zStep = -1, 1 do
						if xStep ~= 0 and zStep ~= 0 then
							makeWedge(xCell + xStep, yCell, zCell + zStep, cluster) 
						end
					end
				end
			end
			clearSelection()
		end
	elseif canDeleteObject(part) then
		local model = findModel(part)
		local oldParent
		if model then 
			if currentSelection == model then
				currentSelection = nil
				clearSelection()
			end
			oldParent = model.Parent
			model:Remove()
		else
			if currentSelection == part then
				currentSelection = nil
				clearSelection()
			end
			oldParent = part.Parent
			part:Remove()
		end
		cleanOrphanedModel(oldParent)
	end
end

function saveSelectionColor(instance)
	if instance:IsA(&quot;BasePart&quot;) then
		currentSelectionColors[instance] = instance.BrickColor
		if instance.BrickColor == BrickColor.Red() then
			instance.BrickColor = BrickColor.new(&quot;Really red&quot;)
		else
			instance.BrickColor = BrickColor.Red()
		end
	end
end
	
function setSelection(partOrModel)
	if partOrModel ~= currentSelection then
		clearSelection()
		currentSelection = partOrModel
		selectionBox.Adornee = currentSelection
	end
end

function clearSelection()
	if currentSelection ~= nil then
		for part, color in pairs(currentSelectionColors) do
			part.BrickColor = color
		end
		selectionBox.Adornee = nil
	end
	currentSelectionColors = {}
	if currentSelection then currentSelection = nil end
	if selectionBox then selectionBox.Adornee = nil end
	megaClusterSelectionBox.Parent = nil
end

-- ~~~~~ RAYCASTING FCNS COPIED FROM STAMPER TOOL ~~~~~ --
-- below function returns the intersection times of a ray having axis-component dir and axis-start-position p with axis coordinates k1, k2, and k3
function getRayAxisIntersectTimes(p, dir, k1, k2, k3)
	local t1, t2, t3
	if -.01 &lt; dir and dir &lt; .01 then
		if (k1 &lt; p and p &lt; k2) or (k1 &gt; p and p &gt; k2) then t1 = 0 t2 = math.huge t3 = math.huge
		elseif (k2 &lt; p and p &lt; k3) or (k2 &gt; p and p &gt; k3) then t1 = 0 t2 = 0 t3 = math.huge
		else t1 = math.huge t2 = math.huge t3 = math.huge end
	else
		t1 = (k1 - p) / dir
		t2 = (k2 - p) / dir
		t3 = (k3 - p) / dir
	end
	return t1, t2, t3
end

-- returns the hitPoint, given a ray (defined by point and direction) and a time of collision
function calcRay(point, direction, time)
	return (point + direction*time)
end

-- below function assumes that our cluster starts with llcorner at position 0,0,0
--function getClusterCell(point)
--	return game.Workspace:FindFirstChild(&quot;Cluster&quot;):GetCell(math.floor((point.X)/4), math.floor((point.Y)/4), math.floor((point.Z)/4))
--end

function checkBox(x, y, z, xSlabs, ySlabs, zSlabs)
	-- need to see if cluster has a cube at the specified location
	local location = Vector3.new((xSlabs[x] + xSlabs[x+1])/2, (ySlabs[y] + ySlabs[y+1])/2, (zSlabs[z] + zSlabs[z+1])/2)
	if cluster:GetCellFull(cluster:WorldToCell(location)) &gt; 0 then return true else return false end
	--if getClusterCell(location) &gt; 0 then return true else return false end
end

function getRayAABBCollisions(p, dir, xSlabs, ySlabs, zSlabs)
	local x1, x2, x3 = getRayAxisIntersectTimes(p.X, dir.X, xSlabs[1], xSlabs[2], xSlabs[3])
	local y1, y2, y3 = getRayAxisIntersectTimes(p.Y, dir.Y, ySlabs[1], ySlabs[2], ySlabs[3])
	local z1, z2, z3 = getRayAxisIntersectTimes(p.Z, dir.Z, zSlabs[1], zSlabs[2], zSlabs[3])

	-- enforce ordering of t1 &lt; t2 &lt; t3 [assumed]
	--if x1 &gt; x3 then temp = x1 x1 = x3 x3 = temp end
	--if y1 &gt; y3 then temp = y1 y1 = y3 y3 = temp end
	--if z1 &gt; z3 then temp = z1 z1 = z3 z3 = temp end

	-- set up xyz tables and indices
	local xtable = {x1, x2, x3}
	local ytable = {y1, y2, y3}
	local ztable = {z1, z2, z3}

	--print(xtable[1], xtable[2], xtable[3])
	--print(ytable[1], ytable[2], ytable[3])
	--print(ztable[1], ztable[2], ztable[3])

	local xIndex = 1
	local yIndex = 1
	local zIndex = 1

	-- loop:
	while xIndex &lt; 3 and yIndex &lt; 3 and zIndex &lt; 3 do
		-- update pointers
		while xIndex &lt; 3 and (xtable[xIndex+1] &lt;= ytable[yIndex] or xtable[xIndex+1] &lt;= ztable[zIndex]) do xIndex = xIndex + 1 end
		while yIndex &lt; 3 and (ytable[yIndex+1] &lt;= xtable[xIndex] or ytable[yIndex+1] &lt;= ztable[zIndex]) do yIndex = yIndex + 1 end
		while zIndex &lt; 3 and (ztable[zIndex+1] &lt;= xtable[xIndex] or ztable[zIndex+1] &lt;= ytable[yIndex]) do zIndex = zIndex + 1 end
		if xIndex &lt; 3 and yIndex &lt; 3 and zIndex &lt; 3 then 
			if checkBox(xIndex, yIndex, zIndex, xSlabs, ySlabs, zSlabs) then  -- if there&apos;s a box in that gridsquare
				-- find the latest ray-entry time and return which axis that was on, as well as the hit-point of the ray

				local boxFrame = CFrame.new(Vector3.new((xSlabs[xIndex] + xSlabs[xIndex+1])/2, (ySlabs[yIndex] + ySlabs[yIndex+1])/2, (zSlabs[zIndex] + zSlabs[zIndex+1])/2))

				if xtable[xIndex] &gt; ytable[yIndex] then
					if xtable[xIndex] &gt; ztable[zIndex] then
						return boxFrame, calcRay(p, dir, xtable[xIndex]), 1
					else
						return boxFrame, calcRay(p, dir, ztable[zIndex]), 3
					end
				else
					if ytable[yIndex] &gt; ztable[zIndex] then
						return boxFrame, calcRay(p, dir, ytable[yIndex]), 2
					else
						return boxFrame, calcRay(p, dir, ztable[zIndex]), 3
					end
				end
			end

			-- advance one pointer by one in direction of smallest next value
			if xtable[xIndex + 1] &lt; ytable[yIndex + 1] then
				if xtable[xIndex + 1] &lt; ztable[zIndex + 1] then
					xIndex = xIndex + 1
				else
					zIndex = zIndex + 1
				end
			else
				if ytable[yIndex + 1] &lt; ztable[zIndex + 1] then
					yIndex = yIndex + 1
				else
					zIndex = zIndex + 1
				end
			end
		end
	end

	-- algorithm: can order all of these 9 values, and step through them in order, whenever we see an x2, y2, or z2, we move that direction in our grid of cubes to check
	--            only after we&apos;ve seen all 1-values do we start checking cubes, and as soon as we see an x3 value we stop.  By &quot;checking cubes&quot; I mean that if that grid space
	--            doesn&apos;t have a cube, we continue, and if it does, then we return that cube and surface as our hit :).  (which axis was our the last value we saw [and direction of our ray] determines the surface we hit).

	--local latestStartTime = math.max(x1, y1, z1)
	return nil, nil, 0 -- no collisions
end

function getClusterAdjustedRaycast(mouseHitInWorld)
		-- Note: we assume cluster is positioned with center at &lt;0,0,0&gt;

		local mouseRay = mouseHitInWorld - game.Workspace.CurrentCamera.CoordinateFrame.p
		local clusterSize = cluster:GetTerrainSizeInStuds()

		mouseHitInWorld = mouseHitInWorld + clusterSize/2

		-- test after filling out slabs below
		local xSlabs = {}
		local ySlabs = {}
		local zSlabs = {}
		if mouseRay.X &gt; 0 then
			xSlabs[1] = 4*math.floor(mouseHitInWorld.X/4) - 4 - clusterSize.X/2
			xSlabs[2] = xSlabs[1] + 4
			xSlabs[3] = xSlabs[1] + 8
		else
			xSlabs[1] = 4*math.ceil(mouseHitInWorld.X/4) + 4 - clusterSize.X/2
			xSlabs[2] = xSlabs[1] - 4
			xSlabs[3] = xSlabs[1] - 8
		end

		if mouseRay.Y &gt; 0 then
			ySlabs[1] = 4*math.floor(mouseHitInWorld.Y/4) - 4 - clusterSize.Y/2
			ySlabs[2] = ySlabs[1] + 4
			ySlabs[3] = ySlabs[1] + 8
		else
			ySlabs[1] = 4*math.ceil(mouseHitInWorld.Y/4) + 4 - clusterSize.Y/2
			ySlabs[2] = ySlabs[1] - 4
			ySlabs[3] = ySlabs[1] - 8
		end

		if mouseRay.Z &gt; 0 then
			zSlabs[1] = 4*math.floor(mouseHitInWorld.Z/4) - 4 - clusterSize.Z/2
			zSlabs[2] = zSlabs[1] + 4
			zSlabs[3] = zSlabs[1] + 8
		else
			zSlabs[1] = 4*math.ceil(mouseHitInWorld.Z/4) + 4 - clusterSize.Z/2
			zSlabs[2] = zSlabs[1] - 4
			zSlabs[3] = zSlabs[1] - 8
		end

		return getRayAABBCollisions(game.Workspace.CurrentCamera.CoordinateFrame.p, mouseRay.unit, xSlabs, ySlabs, zSlabs)
end


function on3dMouseMove(mouse) 
	if isRestricted then
		mouse.TargetFilter = game.Workspace.BaseplateBumpers
	else
		mouse.TargetFilter = megaClusterSelectionBox
	end
	local part = mouse.Target

	if not part then
		clearSelection() 
		return
	elseif part:IsA(&quot;Cluster&quot;) then
		if not cluster then cluster = game:GetService(&quot;TerrainService&quot;) end
		local cellBox = getClusterAdjustedRaycast(mouse.Hit.p)
		print(cellBox)
		if not cellBox then clearSelection() return end
		megaClusterSelectionBox.CFrame = cellBox

		if isRestricted then megaClusterSelectionBox.Parent = game.Workspace.BaseplateBumpers else megaClusterSelectionBox.Parent = game.Workspace end
		selectionBox.Adornee = megaClusterSelectionBox
	elseif canDeleteObject(part) then
		local model = findModel(part)
		if model then 		
			selectionBox.Color = BrickColor.Red()
			setSelection(model)
		else
			selectionBox.Color = BrickColor.Red()
			setSelection(part)
		end
	else
		clearSelection()
	end
end

local equipCount = 0
function onEquippedLocal(mouse)
	equipCount = equipCount + 1
	local val = equipCount

	if isRestricted then
		waitForChild(game.Workspace, &quot;BuildingAreas&quot;)
		if val ~= equipCount then
			return
		end
	end

	local character = script.Parent.Parent
	player = game.Players:GetPlayerFromCharacter(character)
	
	if not player then return end

	if isRestricted then
		local takenAreas = game.Workspace.BuildingAreas:GetChildren()
		for i = 1, #takenAreas do
				if takenAreas[i]:FindFirstChild(&quot;Player&quot;) ~= nil then  -- Test if child exists (to fix current bug: &quot;Player&quot; child is omitted from 1 baseplate at random, when played online.)
					if takenAreas[i].Player.Value == Tool.Parent.Name then
						buildingPlate = takenAreas[i].PlayerArea.BasePlate
						break
					end
				end
		end
	end

   if buildingPlate then
		playerModel  = buildingPlate.Parent
	else
		--playerModel  = nil
		playerModel = game.Workspace
	end
	guiMain = Instance.new(&quot;ScreenGui&quot;)
	guiMain.Parent = player.PlayerGui

	mouse.Button1Down:connect(function() on3dButton1Down(mouse) end)
	mouse.Move:connect(function() on3dMouseMove(mouse) end)
	mouse.Icon =&quot;rbxasset://textures\\HammerCursor.png&quot;

	selectionBox = Instance.new(&quot;SelectionBox&quot;)
	selectionBox.Name = &quot;Model Delete Selection&quot;
	selectionBox.Color = BrickColor.Red()
	selectionBox.Adornee = nil
	selectionBox.Parent = player.PlayerGui

	selectionLasso = Instance.new(&quot;SelectionPartLasso&quot;)
	selectionLasso.Name = &quot;Model Delete Lasso&quot;
	selectionLasso.Humanoid = character.Humanoid
	selectionLasso.archivable = false
	selectionLasso.Visible = true
	selectionLasso.Parent = game.workspace
	selectionLasso.Color = BrickColor.Red()

	highlight = true
end

function onUnequippedLocal()
	highlight = false
	if selectionBox then
		clearSelection()
		selectionBox:Remove()
	end
	if selectionLasso then selectionLasso:Remove() end
end


Tool.Equipped:connect(onEquippedLocal)
Tool.Unequipped:connect(onUnequippedLocal)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX5">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">SwordScript</string>
				<ProtectedString name="Source">-------- OMG HAX

r = game:service(&quot;RunService&quot;)


local damage = 0


local slash_damage = 0


sword = script.Parent.Handle
Tool = script.Parent



function attack()
	local anim = Instance.new(&quot;StringValue&quot;)
	anim.Name = &quot;toolanim&quot;
	anim.Value = &quot;Slash&quot;
	anim.Parent = Tool
end


function swordUp()
	Tool.GripForward = Vector3.new(-1,0,0)
	Tool.GripRight = Vector3.new(0,1,0)
	Tool.GripUp = Vector3.new(0,0,1)
end

function swordOut()
	Tool.GripForward = Vector3.new(0,0,1)
	Tool.GripRight = Vector3.new(0,-1,0)
	Tool.GripUp = Vector3.new(-1,0,0)
end



Tool.Enabled = true

function onActivated()

	if not Tool.Enabled then
		return
	end

	Tool.Enabled = false

	local character = Tool.Parent;
	local humanoid = character.Humanoid
	if humanoid == nil then
		return 
	end

	

	attack()

	wait(1)

	Tool.Enabled = true
end


script.Parent.Activated:connect(onActivated)

</ProtectedString>
			</Properties>
		</Item>
		<Item class="BoolValue" referent="RBX6">
			<Properties>
				<bool name="Archivable">true</bool>
				<string name="Name">IsRestricted</string>
				<bool name="Value">false</bool>
			</Properties>
		</Item>
		<Item class="BoolValue" referent="RBX7">
			<Properties>
				<bool name="Archivable">true</bool>
				<string name="Name">AutoWedgeClusterParts</string>
				<bool name="Value">false</bool>
			</Properties>
		</Item>
	</Item>
</roblox>