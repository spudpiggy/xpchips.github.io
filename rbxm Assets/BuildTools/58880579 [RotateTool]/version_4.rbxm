<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="Archivable">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>-0.699999988</Z>
				<R00>-0</R00>
				<R01>0</R01>
				<R02>1</R02>
				<R10>1</R10>
				<R11>-0</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>1</R21>
				<R22>0</R22>
			</CoordinateFrame>
			<string name="Name">RotateTool</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=59103214</url></Content>
		</Properties>
		<Item class="Part" referent="RBX1">
			<Properties>
				<bool name="Anchored">false</bool>
				<bool name="Archivable">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">199</int>
				<CoordinateFrame name="CFrame">
					<X>-35</X>
					<Y>1.60000002</Y>
					<Z>3.5</Z>
					<R00>0</R00>
					<R01>0</R01>
					<R02>-1</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>1</R20>
					<R21>0</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>0.800000012</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX2">
				<Properties>
					<bool name="Archivable">true</bool>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=16884681</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.600000024</X>
						<Y>0.600000024</Y>
						<Z>0.600000024</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=16884673</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX3">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RotateScript</string>
				<ProtectedString name="Source">-- NOTES:
--      NEEDS:
--            X  1.)  Make single blocks rotate always (they rotate 2x, then seem to think of themselves as blockers of themselves...  whaaa?)
--				  X  2.)  Make scripts continue to work through rotations (or else error on any objects which can&apos;t be rotated...  prehaps elevators?)
--            3.)  File bug for #1 and for &quot;# of parts counted BEFORE instance-filter is applied for game.Workspace:FindPartsInRegion3&quot;
--            4.)  Make things rotate separately (break and make welds)
--				  5.)  When something else is attached to a single block, stuff still breaks X&lt;

-- general functions
function waitForProperty(instance, name)
	while not instance[name] do
		instance.Changed:wait()
	end
end
function waitForChild(instance, name)
	while not instance:FindFirstChild(name) do
		instance.ChildAdded:wait()
	end
end

local Tool = script.Parent
local player
local playerArea
local selectionBox
local selectedModel = nil

waitForChild(Tool, &quot;ErrorBox&quot;)
local errorBox = Tool.ErrorBox

game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/configure_sel.png&quot;)


function getBoundingBox2(partOrModel)
-- for models, the bounding box is defined as the minimum and maximum individual part bounding boxes
-- relative to the first part&apos;s coordinate frame.

	local minVec = Vector3.new(math.huge, math.huge, math.huge)
	local maxVec = Vector3.new(-math.huge, -math.huge, -math.huge)

	if partOrModel:IsA(&quot;Part&quot;) or partOrModel:IsA(&quot;WedgePart&quot;) or partOrModel:IsA(&quot;TrussPart&quot;)then
		minVec = partOrModel.CFrame:pointToWorldSpace(-0.5 * partOrModel.Size)
		maxVec = partOrModel.CFrame:pointToWorldSpace(0.5 * partOrModel.Size)
	else
		local part1 = partOrModel:GetChildren()[1]
		for i, object in pairs(partOrModel:GetChildren()) do
			if (object:IsA(&quot;Part&quot;) or object:IsA(&quot;WedgePart&quot;) or object:IsA(&quot;TrussPart&quot;)) then
				boxMinInWorld1 = object.CFrame:pointToWorldSpace(-0.5 * object.Size)
				--boxMinInPart1 = part1.CFrame:pointToObjectSpace(boxMinInWorld)
				boxMaxInWorld1 = object.CFrame:pointToWorldSpace(0.5 * object.Size)
				--boxMaxInPart1 = part1.CFrame:pointToObjectSpace(boxMaxInWorld)

				local minX = minVec.x
				local minY = minVec.y
				local minZ = minVec.z
				local maxX = maxVec.x
				local maxY = maxVec.y
				local maxZ = maxVec.z
				if boxMinInWorld1.x &lt; minVec.x then
					minX = boxMinInWorld1.x
				end
				if boxMinInWorld1.y &lt; minVec.y then
					minY = boxMinInWorld1.y
				end
				if boxMinInWorld1.z &lt; minVec.z then
					minZ = boxMinInWorld1.z
				end
				if boxMaxInWorld1.x &lt; minX then
					minX = boxMaxInWorld1.x
				end
				if boxMaxInWorld1.y &lt; minY then
					minY = boxMaxInWorld1.y
				end
				if boxMaxInWorld1.z &lt; minZ then
					minZ = boxMaxInWorld1.z
				end

				if boxMinInWorld1.x &gt; maxVec.x then
					maxX = boxMinInWorld1.x
				end
				if boxMinInWorld1.y &gt; maxVec.y then
					maxY = boxMinInWorld1.y
				end
				if boxMinInWorld1.z &gt; maxVec.z then
					maxZ = boxMinInWorld1.z
				end
				if boxMaxInWorld1.x &gt; maxX then
					maxX = boxMaxInWorld1.x
				end
				if boxMaxInWorld1.y &gt; maxY then
					maxY = boxMaxInWorld1.y
				end
				if boxMaxInWorld1.z &gt; maxZ then
					maxZ = boxMaxInWorld1.z
				end

				minVec = Vector3.new(minX, minY, minZ)
				maxVec = Vector3.new(maxX, maxY, maxZ)
			end
		end
	end

	return minVec, maxVec
end

function isInRobloxModel(part)
	if part == game.Workspace then
		return false, nil
	elseif part:FindFirstChild(&quot;RobloxModel&quot;) then 
		return true, part
	else
		return isInRobloxModel(part.Parent)
	end
end

function isInMyArea(part)
	if part.Parent == nil then return false end
	if part.Parent:FindFirstChild(&quot;Player&quot;) and part.Parent.Player:IsA(&quot;StringValue&quot;) then
		if part.Parent.Player.Value == player.Name then
			return true
		else
			return false
		end
	elseif part.Parent == game.Workspace.BuildingAreas or part.Parent == game.Workspace then
		return false
	else
		return isInMyArea(part.Parent)
	end
end


function on3dButton1Down(mouse)
	-- don&apos;t do anything for now (can fix later: for now this means you can click one model, drag mouse to second model, and release mouse, and this will activate second model)
end


function offsetPartsByVector3(partOrModel, offsetVector)
	local insertCFrame
	if partOrModel:IsA(&quot;Model&quot;) then
		for i, object in pairs(partOrModel:GetChildren()) do
			if (object:IsA(&quot;Part&quot;) or object:IsA(&quot;WedgePart&quot;) or object:IsA(&quot;TrussPart&quot;)) then
				object.CFrame = object.CFrame + offsetVector
			end
		end
	else
		partOrModel.CFrame = partOrModel.CFrame + offsetVector
	end
end

function storeAndDisableScriptsInModel(parent, scriptTable)
	print(&quot;STORINGSCRIPTS&quot;)
	for i, object in pairs(parent:GetChildren()) do
		if object:IsA(&quot;Script&quot;) or object:IsA(&quot;LocalScript&quot;) then if not object.Disabled then print(object) object.Disabled = true table.insert(scriptTable, object) end end
		if object.GetChildren then storeAndDisableScriptsInModel(object, scriptTable) end
	end
end

function isInternalWeld(weld, model)
	return (not weld.Part0 or weld.Part0:IsDescendantOf(model)) and (not weld.Part1 or weld.Part1:IsDescendantOf(model))
end

function storeAndRemoveWeldsInModel(initialmodel, model, welds, weldParents)
	for i, object in pairs(model:GetChildren()) do
		if object.className == &quot;ManualWeld&quot; then if isInternalWeld(object, initialmodel) then table.insert(welds, object) table.insert(weldParents, object.Parent) object.Parent = nil end end
		if object.GetChildren then storeAndRemoveWeldsInModel(initialmodel, object, welds, weldParents) end
	end
end


local debris = game:GetService(&quot;Debris&quot;)
function flashRedBox(modelToFlash)
	if not modelToFlash then return end 

	errorBox.Parent = player.PlayerGui
	errorBox.Adornee = modelToFlash

	delay(0,function()
		for i = 1, 3 do
			errorBox.Visible = true
			wait(0.13)
			errorBox.Visible = false
			wait(0.13)
		end
		errorBox.Adornee = nil
		errorBox.Parent = Tool
	end)
end



local debounce = false
function on3dButton1Up(mouse)
	local modelToRotate = selectedModel -- so that other mouse events can&apos;t give us race conditions
	if modelToRotate and not debounce then
		debounce = true
		-- get the model centroid
		local minBB, maxBB = getBoundingBox2(modelToRotate)
		local oldModelCentroid = (minBB + maxBB) / 2  -- point to rotate around

		local diagVector = minBB - oldModelCentroid
		local rotatedDiagVector = Vector3.new(diagVector.Z, diagVector.Y, diagVector.X)
		local rotatedMinBB = oldModelCentroid + rotatedDiagVector
		local rotatedMaxBB = oldModelCentroid - rotatedDiagVector

		-- check if part rotation will cause collision
		local fudgeVector = Vector3.new(0.4, 0.4, 0.4)  -- mmmmmm, fudge

		-- below line checks CURRENT BB, not post-rotation BB
		--local blockingParts = game.Workspace:FindPartsInRegion3(Region3.new(minBB + fudgeVector, maxBB - fudgeVector), modelToRotate, 100)

		local blockingParts = game.Workspace:FindPartsInRegion3(Region3.new(rotatedMinBB + fudgeVector, rotatedMaxBB - fudgeVector), modelToRotate, 100)

		if #blockingParts &gt; 1 or (#blockingParts &gt; 0 and blockingParts[1] ~= modelToRotate) then
			-- BLOCKED!!  MAKE ERROR NOISE!
			print(&quot;Can&apos;t rotate now!  X&lt;&quot;)
			for j = 1, #blockingParts do 
				print(blockingParts[j]) 
				if blockingParts[j].className ~= &quot;WedgePart&quot; and (blockingParts[j].Size / 2):Dot(blockingParts[j].Size / 2) &gt; 9 and blockingParts[j] ~= modelToRotate then
					debounce = false
					flashRedBox(modelToRotate)
					return
				end
			end
		--else
		end
			-- do the rotation! :D
			print(&quot;Rotating! :D&quot;)
			local rotCF = CFrame.fromEulerAnglesXYZ(0, math.pi/2, 0)

			game.JointsService:SetJoinAfterMoveInstance(modelToRotate)
			game.JointsService:ClearJoinAfterMoveJoints()

		
			-- below simple script disabling/re-enabling works for all scripts in normal usabilityset except for elevators and retracting spike [see if just need to change &quot;Weld&quot; in spikescript to &quot;ManualWeld&quot;... may need to also make sure below script-table can store all descendent scripts of modelToRotate, and not just immediate children...]
				-- and elevator scripts only break if you rotate when the elevator is in the &quot;fully down&quot; position...  probably just need some sort of check in ElevatorScript for this case

			local scriptsToTurnBackOn = {}
			storeAndDisableScriptsInModel(modelToRotate, scriptsToTurnBackOn)

			local weldsToReturn = {}
			local weldParentsToReturn = {}
			storeAndRemoveWeldsInModel(modelToRotate, modelToRotate, weldsToReturn, weldParentsToReturn)

			modelToRotate:BreakJoints()

			if modelToRotate:IsA(&quot;Model&quot;) then
				for i, object in pairs(modelToRotate:GetChildren()) do
					if object:IsA(&quot;Part&quot;) or object:IsA(&quot;TrussPart&quot;) or object:IsA(&quot;WedgePart&quot;) then object.CFrame = rotCF * object.CFrame end
				end
			else
				modelToRotate.CFrame = rotCF * modelToRotate.CFrame
			end

			-- fix position so centroid remains in same place
			local newMinBB, newMaxBB = getBoundingBox2(modelToRotate)
			local newModelCentroid = (newMinBB + newMaxBB) / 2
			offsetPartsByVector3(modelToRotate, oldModelCentroid - newModelCentroid)

			game.JointsService:CreateJoinAfterMoveJoints()
			modelToRotate:MakeJoints()

			-- return all manual welds
			print(#weldsToReturn)
			for i = 1, #weldsToReturn do weldsToReturn[i].Parent = weldParentsToReturn[i] end

			-- turn back on scripts
			for i = 1, #scriptsToTurnBackOn do scriptsToTurnBackOn[i].Disabled = false end
		--end

		--[[ for debugging
		local tempPart = Instance.new(&quot;Part&quot;)
		tempPart.CanCollide = false
		tempPart.Anchored = true
		tempPart.Size = maxBB - minBB
		tempPart.CFrame = CFrame.new((minBB + maxBB)/2)
		tempPart.Parent = game.Workspace
		game:GetService(&quot;Debris&quot;):AddItem(tempPart, .5) ]]--


		debounce = false
	end
end

function on3dMouseMove(mouse)
	local mouseModel
	if mouse.Target == nil then mouseModel = nil
	else boolGarbage, mouseModel = isInRobloxModel(mouse.Target) end

	if mouseModel == nil or (Tool.IsRestricted.Value and (not isInMyArea(mouseModel))) then mouseModel = nil end

	-- see if need to switch selectionBox
	if mouseModel ~= selectedModel then
		selectedModel = mouseModel
		selectionBox.Adornee = selectedModel
	end
end

function canSelectObject(part)
	if Tool.IsRestricted.Value then
		waitForChild(playerArea,&quot;PlayerArea&quot;)
		if playerArea:FindFirstChild(&quot;PlayerArea&quot;) and part:IsDescendantOf(playerArea.PlayerArea) then
			return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
		else
			return false
		end
	end

	return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
end

function onEquippedLocal(mouse)
	local character = script.Parent.Parent
	player = game.Players:GetPlayerFromCharacter(character)

	if player == nil then return end

	if Tool.IsRestricted.Value then
		waitForChild(game.Workspace,&quot;BuildingAreas&quot;)
		waitForChild(game.Workspace.BuildingAreas,&quot;Area1&quot;)
		waitForChild(game.Workspace.BuildingAreas.Area1,&quot;Player&quot;)
		local areas = game.Workspace.BuildingAreas:GetChildren()
		for i = 1, #areas do
			if areas[i]:FindFirstChild(&quot;Player&quot;) and areas[i].Player.Value == player.Name then
				playerArea = areas[i]
				break
			end
		end
	end

	if game.Workspace:FindFirstChild(&quot;BaseplateBumpers&quot;) then mouse.TargetFilter = game.Workspace.BaseplateBumpers end

	mouse.Icon =&quot;rbxasset://textures\\DragCursor.png&quot;
	mouse.Button1Down:connect(function() on3dButton1Down(mouse) end)
	mouse.Button1Up:connect(function() on3dButton1Up(mouse) end)
	mouse.Move:connect(function() on3dMouseMove(mouse) end)
	
	selectionBox = Instance.new(&quot;SelectionBox&quot;)
	selectionBox.Name = &quot;MainSelectionBox&quot;
	selectionBox.Color = BrickColor.Blue()
	selectionBox.Adornee = nil
	selectionBox.Parent = player.PlayerGui;

	on3dMouseMove(mouse) -- so if they unequip/reequip, they still have selection box
end

function onUnequippedLocal()
	if selectionBox then selectionBox:Remove() end
	selectedModel = nil
	player = nil
end


Tool.Equipped:connect(onEquippedLocal)
Tool.Unequipped:connect(onUnequippedLocal)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="BoolValue" referent="RBX4">
			<Properties>
				<bool name="Archivable">true</bool>
				<string name="Name">IsRestricted</string>
				<bool name="Value">false</bool>
			</Properties>
		</Item>
		<Item class="SelectionBox" referent="RBX5">
			<Properties>
				<Ref name="Adornee">null</Ref>
				<bool name="Archivable">true</bool>
				<int name="Color">21</int>
				<string name="Name">ErrorBox</string>
				<float name="Transparency">0</float>
				<bool name="Visible">false</bool>
			</Properties>
		</Item>
	</Item>
</roblox>