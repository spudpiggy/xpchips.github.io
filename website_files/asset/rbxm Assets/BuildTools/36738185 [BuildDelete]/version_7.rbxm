<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="Archivable">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>-0.5</Z>
				<R00>0</R00>
				<R01>0</R01>
				<R02>1</R02>
				<R10>1</R10>
				<R11>0</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>1</R21>
				<R22>0</R22>
			</CoordinateFrame>
			<string name="Name">DeleteTool</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=55212908</url></Content>
		</Properties>
		<Item class="Part" referent="RBX1">
			<Properties>
				<bool name="Anchored">false</bool>
				<bool name="Archivable">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">199</int>
				<CoordinateFrame name="CFrame">
					<X>-12.0932655</X>
					<Y>5.09790707</Y>
					<Z>-10.9329929</Z>
					<R00>0.815435171</R00>
					<R01>0.578847528</R01>
					<R02>-0.000649310299</R02>
					<R10>0.000796274282</R10>
					<R11>-3.93885717e-021</R11>
					<R12>0.999999642</R12>
					<R20>0.578847408</R20>
					<R21>-0.81543535</R21>
					<R22>-0.000460921437</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0.400000006</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>0.800000012</Y>
					<Z>3</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX2">
				<Properties>
					<bool name="Archivable">true</bool>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=16198309</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.20000005</X>
						<Y>1.20000005</Y>
						<Z>1.20000005</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=16198294</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX3">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Looped">false</bool>
					<string name="Name">Sound</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/Asset/?ID=12135982</url></Content>
					<float name="Volume">0.699999988</float>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX4">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Model Delete Local</string>
				<ProtectedString name="Source">function waitForChild(instance, name)
&#9;while not instance:FindFirstChild(name) do
&#9;&#9;instance.ChildAdded:wait()
&#9;end
end


local Tool = script.Parent

enabled = true
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/delete_sel.png&quot;)

local cluster = nil

local selectionBox
local currentSelection
local currentSelectionColors = {}
local selectionLasso

local deleteDistance = 100
local player = nil
--local playerModel = nil
local playerModel = game.Workspace
local buildingPlate = nil

local highlight = false

local megaClusterSelectionBox = Instance.new(&quot;Part&quot;)
megaClusterSelectionBox.FormFactor = &quot;Custom&quot;
megaClusterSelectionBox.Size = Vector3.new(4, 4, 4) -- a little thicker than 4x4x4 unit clusterpart; just so selection box is more easily seen
megaClusterSelectionBox.Transparency = 1
megaClusterSelectionBox.Anchored = true
megaClusterSelectionBox.CanCollide = false
megaClusterSelectionBox.Parent = nil

waitForChild(Tool, &quot;IsRestricted&quot;)
local isRestricted = Tool.IsRestricted.Value

waitForChild(Tool, &quot;AutoWedgeClusterParts&quot;)
local autoWedgeClusterParts = Tool.AutoWedgeClusterParts.Value

function hint(label)

&#9;-- Pass in a string, it shows a top hint.  (Replaces previous hint, if exists)
&#9;_player = game.Players:GetPlayerFromCharacter(Tool.Parent)
&#9;if(_player ~= nil and _player.PlayerGui:FindFirstChild(&quot;topHint&quot;)~=nil) then
&#9;&#9;local topHint = _player.PlayerGui.topHint
&#9;&#9;topHint.Add.Label.Value = label
&#9;&#9;topHint.Add.Width.Value = 3 -- widest width
&#9;&#9;topHint.Add.Time.Value = 5
&#9;&#9;topHint.Add.Disabled = true
&#9;&#9;topHint.Add.Disabled = false
&#9;end

end

function canDeleteObject(part)
&#9;-- let them delete anything that they created *or* anything on their baseplate
&#9;return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; deleteDistance and (isChildOfMyModel(part) or partInBounds(part))
end

-- For Restricting Stamper Tool (isRestricted)
function inBounds(part)

&#9;if part == nil then return false end

&#9;if part:IsA(&quot;Part&quot;) or part:IsA(&quot;WedgePart&quot;) or part:IsA(&quot;TrussPart&quot;) then
&#9;&#9;if not partInBounds(part) then return false end
&#9;elseif part:IsA(&quot;Model&quot;) then
&#9;&#9;local primPart = object.PrimaryPart
&#9;&#9;if not partInBounds(primPart) then return false end
&#9;end

&#9;return true

end

function partInBounds(part)

&#9;local xOne = buildingPlate.Position.x + buildingPlate.Size.x/2
&#9;local xTwo = buildingPlate.Position.x - buildingPlate.Size.x/2
&#9;local zOne = buildingPlate.Position.z + buildingPlate.Size.z/2
&#9;local zTwo = buildingPlate.Position.z - buildingPlate.Size.z/2

&#9;if part.Position.x &gt; xOne or part.Position.x &lt; xTwo then return false end
&#9;if part.Position.z &gt; zOne or part.Position.z &lt; zTwo then return false end

&#9;return true

end


function findModel(part)
&#9;while part ~= nil do
&#9;&#9;if part.className == &quot;Model&quot; and part.Name ~= playerModel.Name and part.Name ~= &quot;GarbageParts&quot; then
&#9;&#9;&#9;return part
&#9;&#9;elseif part.Name == playerModel.Name or part.Name == &quot;GarbageParts&quot; then
&#9;&#9;&#9;return nil
&#9;&#9;end
&#9;&#9;part = part.Parent
&#9;end

&#9;return nil
end

function cleanOrphanedModel(parent)
&#9;if not parent then return end
&#9;if parent.className == &quot;Model&quot; then
&#9;&#9;local children = parent:GetChildren()
&#9;&#9;if #children == 0 and parent.Name ~= &quot;GarbageParts&quot; then
&#9;&#9;&#9;local oldParent = parent.Parent
&#9;&#9;&#9;parent:Remove()
&#9;&#9;&#9;cleanOrphanedModel(oldParent)
&#9;&#9;end
&#9;end
end

function isChildOfMyModel(part)
&#9;&#9;if not playerModel then return true end
&#9;&#9;if playerModel:IsAncestorOf(part) then
&#9;&#9;&#9;return true
&#9;&#9;else return false end
end


-- Cyrion&apos;s auto-wedge fcn:
--turns column going down from coordinate x, y, z in cluster c into a wedge if possible
function makeWedge(x, y, z, c)
&#9;-- bounds-check the call first
&#9;if x &lt; 0 or y &lt; 0 or z &lt; 0 then return end
&#9;local clusterMaxX, clusterMaxY, clusterMaxZ = c:GetTerrainSizeInCells()
&#9;if x &gt;= clusterMaxX or y &gt;= clusterMaxY or z &gt;= clusterMaxZ then return end


&#9;materiala, wedgea, rotationa = c:GetCellFull(x, y, z)
&#9;materialb, wedgeb, rotationb = c:GetCellFull(x, y + 1, z)
&#9;if materiala &gt; 0 and materialb == 0 then
&#9;&#9;--wedges
&#9;&#9;originalheight = y
&#9;&#9;h = originalheight
&#9;&#9;wedgetype = -1 --type of wedge used above this one
&#9;&#9;material, wedge, rotation = c:GetCellFull(x, h, z)
&#9;&#9;while (wedgetype ~= 0 or h &gt;= originalheight - 1) and h &gt;= 0 and material &gt; 0 do
&#9;&#9;&#9;sides = {} --array of 4 surrounding coordinates, sides[n] has value 1 if coordinate is same height, 0 if lower
&#9;&#9;&#9;surroundingsides = 0
&#9;&#9;&#9;
&#9;&#9;&#9;--check heights of 4 side coordinates
&#9;&#9;&#9;
&#9;&#9;&#9;--sides
&#9;&#9;&#9;material0s, wedge0s, rotation0s = c:GetCellFull(x, h, z + 1)
&#9;&#9;&#9;if material0s &gt; 0 then
&#9;&#9;&#9;&#9;sides[0] = 1
&#9;&#9;&#9;&#9;surroundingsides = surroundingsides + 1
&#9;&#9;&#9;elseif material0s == 0 then
&#9;&#9;&#9;&#9;sides[0] = 0
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;material1s, wedge1s, rotation1s = c:GetCellFull(x + 1, h, z)
&#9;&#9;&#9;if material1s &gt; 0 then
&#9;&#9;&#9;&#9;sides[1] = 1
&#9;&#9;&#9;&#9;surroundingsides = surroundingsides + 1
&#9;&#9;&#9;elseif material1s == 0 then
&#9;&#9;&#9;&#9;sides[1] = 0
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;material2s, wedge2s, rotation2s = c:GetCellFull(x, h, z - 1)
&#9;&#9;&#9;if material2s &gt; 0 then
&#9;&#9;&#9;&#9;sides[2] = 1
&#9;&#9;&#9;&#9;surroundingsides = surroundingsides + 1
&#9;&#9;&#9;elseif material2s == 0 then
&#9;&#9;&#9;&#9;sides[2] = 0
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;material3s, wedge3s, rotation3s = c:GetCellFull(x - 1, h, z)
&#9;&#9;&#9;if material3s &gt; 0 then
&#9;&#9;&#9;&#9;sides[3] = 1
&#9;&#9;&#9;&#9;surroundingsides = surroundingsides + 1
&#9;&#9;&#9;elseif material3s == 0 then
&#9;&#9;&#9;&#9;sides[3] = 0
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;--corners
&#9;&#9;&#9;surroundingcorners = 0
&#9;&#9;&#9;corners = {} --an array of 4 corner coordinates, corners[n] has value 1 if coordinate is same height, 0 if lower
&#9;&#9;&#9;
&#9;&#9;&#9;material0c, wedge0c, rotation0c = c:GetCellFull(x - 1, h, z - 1)
&#9;&#9;&#9;if material0c &gt; 0 then
&#9;&#9;&#9;&#9;surroundingcorners = surroundingcorners + 1
&#9;&#9;&#9;&#9;corners[0] = 1
&#9;&#9;&#9;elseif material0c == 0 then
&#9;&#9;&#9;&#9;corners[0] = 0
&#9;&#9;&#9;end
&#9;&#9;
&#9;&#9;&#9;material1c, wedge1c, rotation1c = c:GetCellFull(x - 1, h, z + 1)
&#9;&#9;&#9;if material1c &gt; 0 then
&#9;&#9;&#9;&#9;surroundingcorners = surroundingcorners + 1
&#9;&#9;&#9;&#9;corners[1] = 1
&#9;&#9;&#9;elseif material1c == 0 then
&#9;&#9;&#9;&#9;corners[1] = 0
&#9;&#9;&#9;end
&#9;&#9;
&#9;&#9;&#9;material2c, wedge2c, rotation2c = c:GetCellFull(x + 1, h, z + 1)
&#9;&#9;&#9;if material2c &gt; 0 then
&#9;&#9;&#9;&#9;surroundingcorners = surroundingcorners + 1
&#9;&#9;&#9;&#9;corners[2] = 1
&#9;&#9;&#9;elseif material2c == 0 then
&#9;&#9;&#9;&#9;corners[2] = 0
&#9;&#9;&#9;end
&#9;&#9;
&#9;&#9;&#9;material3c, wedge3c, rotation3c = c:GetCellFull(x + 1, h, z - 1)
&#9;&#9;&#9;if material3c &gt; 0 then
&#9;&#9;&#9;&#9;surroundingcorners = surroundingcorners + 1
&#9;&#9;&#9;&#9;corners[3] = 1
&#9;&#9;&#9;elseif material3c == 0 then
&#9;&#9;&#9;&#9;corners[3] = 0
&#9;&#9;&#9;end
&#9;&#9;
&#9;&#9;&#9;--put in wedges
&#9;&#9;&#9;--print(&quot;sides0: &quot;..sides[0])
&#9;&#9;&#9;--print(&quot;sides1: &quot;..sides[1])
&#9;&#9;&#9;--print(&quot;sides2: &quot;..sides[2])
&#9;&#9;&#9;--print(&quot;sides3: &quot;..sides[3])
&#9;&#9;&#9;if surroundingsides == 0 then
&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 0, 0)
&#9;&#9;&#9;&#9;wedgetype = 0
&#9;&#9;&#9;elseif surroundingsides == 1 then
&#9;&#9;&#9;&#9;if wedgetype == -1 then
&#9;&#9;&#9;&#9;&#9;for n = 0, 3 do
&#9;&#9;&#9;&#9;&#9;&#9;if sides[n] &gt;= 1 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 1, (n + 2) % 4)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 1
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 0, 0)
&#9;&#9;&#9;&#9;&#9;wedgetype = 0
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif surroundingsides == 2 then
&#9;&#9;&#9;&#9;set = false
&#9;&#9;&#9;&#9;for n = 0, 3 do
&#9;&#9;&#9;&#9;&#9;if sides[n] == 0 then
&#9;&#9;&#9;&#9;&#9;&#9;if sides[(n + 1) % 4] == 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;set = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if wedgetype == -1 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if corners[n] &gt;= 1 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 2, (n + 1) % 4)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 2
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;lastorientation = n
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 4, (n + 1) % 4)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 4
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;lastorientation = n
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif wedgetype == 2 or wedgetype == 4 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 4, (lastorientation + 1) % 4)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 4
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 0, 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end&#9;
&#9;&#9;&#9;&#9;if set == false then
&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 0, 0)
&#9;&#9;&#9;&#9;&#9;wedgetype = 0
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif surroundingsides == 3 then
&#9;&#9;&#9;&#9;for n = 0, 3 do
&#9;&#9;&#9;&#9;&#9;if sides[n] == 0 then
&#9;&#9;&#9;&#9;&#9;&#9;if wedgetype == -1 and corners[n] &gt;= 1 and corners[(n + 3) % 4] &gt;= 1 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 1, n)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 1
&#9;&#9;&#9;&#9;&#9;&#9;elseif wedgetype == 2 or wedgetype == 4 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 4, (lastorientation + 1) % 4)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 4
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 0, 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 0
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif surroundingsides == 4 then
&#9;&#9;&#9;&#9;if (wedgetype == -1 or wedgetype == 2 or wedgetype == 4) and surroundingcorners == 3 then
&#9;&#9;&#9;&#9;&#9;for n = 0, 3 do
&#9;&#9;&#9;&#9;&#9;&#9;if corners[n] == 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 3, (n + 3) % 4)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wedgetype = 3
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;c:SetCellFull(x, h, z, 1, 0, 0)
&#9;&#9;&#9;&#9;&#9;wedgetype = 0
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;h = h - 1
&#9;&#9;&#9;if h &gt;= 0 then
&#9;&#9;&#9;&#9;material, wedge, rotation = c:GetCellFull(x, h, z)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end


function on3dButton1Down(mouse)
&#9;local part = mouse.Target

&#9;if part == nil then 
&#9;&#9;return
&#9;elseif part:IsA(&quot;Cluster&quot;) then
&#9;&#9;--local xCell, yCell, zCell = clusterTarget(Vector3.new(math.floor(mouse.Hit.X/4), math.floor(mouse.Hit.Y/4), math.floor(mouse.Hit.Z/4)), mouse.Hit - game.Workspace.CurrentCamera.CoordinateFrame.p, part)
&#9;&#9;--if xCell ~= nil then
&#9;&#9;local cellBox = getClusterAdjustedRaycast(mouse.Hit.p)
&#9;&#9;if cellBox ~= nil then
&#9;&#9;&#9;--part:SetCell(xCell, yCell, zCell, 0)
&#9;&#9;&#9;--part:SetCell(math.floor(cellBox.p.X/4), math.floor(cellBox.p.Y/4), math.floor(cellBox.p.Z/4))
&#9;&#9;&#9;
&#9;&#9;&#9;--cluster:SetCellFull(cluster:WorldToCell(cellBox.p))
&#9;&#9;&#9;local xCell, yCell, zCell = cluster:WorldToCell(cellBox.p)
&#9;&#9;&#9;cluster:SetCellFull(xCell, yCell, zCell)
&#9;&#9;&#9;if (autoWedgeClusterParts) then
&#9;&#9;&#9;&#9;for xStep = -1, 1 do
&#9;&#9;&#9;&#9;&#9;for zStep = -1, 1 do
&#9;&#9;&#9;&#9;&#9;&#9;if xStep ~= 0 and zStep ~= 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;makeWedge(xCell + xStep, yCell, zCell + zStep, cluster) 
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;clearSelection()
&#9;&#9;end
&#9;elseif canDeleteObject(part) then
&#9;&#9;local model = findModel(part)
&#9;&#9;local oldParent
&#9;&#9;if model then 
&#9;&#9;&#9;if currentSelection == model then
&#9;&#9;&#9;&#9;currentSelection = nil
&#9;&#9;&#9;&#9;clearSelection()
&#9;&#9;&#9;end
&#9;&#9;&#9;oldParent = model.Parent
&#9;&#9;&#9;model:Remove()
&#9;&#9;else
&#9;&#9;&#9;if currentSelection == part then
&#9;&#9;&#9;&#9;currentSelection = nil
&#9;&#9;&#9;&#9;clearSelection()
&#9;&#9;&#9;end
&#9;&#9;&#9;oldParent = part.Parent
&#9;&#9;&#9;part:Remove()
&#9;&#9;end
&#9;&#9;cleanOrphanedModel(oldParent)
&#9;end
end

function saveSelectionColor(instance)
&#9;if instance:IsA(&quot;BasePart&quot;) then
&#9;&#9;currentSelectionColors[instance] = instance.BrickColor
&#9;&#9;if instance.BrickColor == BrickColor.Red() then
&#9;&#9;&#9;instance.BrickColor = BrickColor.new(&quot;Really red&quot;)
&#9;&#9;else
&#9;&#9;&#9;instance.BrickColor = BrickColor.Red()
&#9;&#9;end
&#9;end
end
&#9;
function setSelection(partOrModel)
&#9;if partOrModel ~= currentSelection then
&#9;&#9;clearSelection()
&#9;&#9;currentSelection = partOrModel
&#9;&#9;selectionBox.Adornee = currentSelection
&#9;end
end

function clearSelection()
&#9;if currentSelection ~= nil then
&#9;&#9;for part, color in pairs(currentSelectionColors) do
&#9;&#9;&#9;part.BrickColor = color
&#9;&#9;end
&#9;&#9;selectionBox.Adornee = nil
&#9;end
&#9;currentSelectionColors = {}
&#9;if currentSelection then currentSelection = nil end
&#9;if selectionBox then selectionBox.Adornee = nil end
&#9;megaClusterSelectionBox.Parent = nil
end

-- ~~~~~ RAYCASTING FCNS COPIED FROM STAMPER TOOL ~~~~~ --
-- below function returns the intersection times of a ray having axis-component dir and axis-start-position p with axis coordinates k1, k2, and k3
function getRayAxisIntersectTimes(p, dir, k1, k2, k3)
&#9;local t1, t2, t3
&#9;if -.01 &lt; dir and dir &lt; .01 then
&#9;&#9;if (k1 &lt; p and p &lt; k2) or (k1 &gt; p and p &gt; k2) then t1 = 0 t2 = math.huge t3 = math.huge
&#9;&#9;elseif (k2 &lt; p and p &lt; k3) or (k2 &gt; p and p &gt; k3) then t1 = 0 t2 = 0 t3 = math.huge
&#9;&#9;else t1 = math.huge t2 = math.huge t3 = math.huge end
&#9;else
&#9;&#9;t1 = (k1 - p) / dir
&#9;&#9;t2 = (k2 - p) / dir
&#9;&#9;t3 = (k3 - p) / dir
&#9;end
&#9;return t1, t2, t3
end

-- returns the hitPoint, given a ray (defined by point and direction) and a time of collision
function calcRay(point, direction, time)
&#9;return (point + direction*time)
end

-- below function assumes that our cluster starts with llcorner at position 0,0,0
--function getClusterCell(point)
--&#9;return game.Workspace:FindFirstChild(&quot;Cluster&quot;):GetCell(math.floor((point.X)/4), math.floor((point.Y)/4), math.floor((point.Z)/4))
--end

function checkBox(x, y, z, xSlabs, ySlabs, zSlabs)
&#9;-- need to see if cluster has a cube at the specified location
&#9;local location = Vector3.new((xSlabs[x] + xSlabs[x+1])/2, (ySlabs[y] + ySlabs[y+1])/2, (zSlabs[z] + zSlabs[z+1])/2)
&#9;if cluster:GetCellFull(cluster:WorldToCell(location)) &gt; 0 then return true else return false end
&#9;--if getClusterCell(location) &gt; 0 then return true else return false end
end

function getRayAABBCollisions(p, dir, xSlabs, ySlabs, zSlabs)
&#9;local x1, x2, x3 = getRayAxisIntersectTimes(p.X, dir.X, xSlabs[1], xSlabs[2], xSlabs[3])
&#9;local y1, y2, y3 = getRayAxisIntersectTimes(p.Y, dir.Y, ySlabs[1], ySlabs[2], ySlabs[3])
&#9;local z1, z2, z3 = getRayAxisIntersectTimes(p.Z, dir.Z, zSlabs[1], zSlabs[2], zSlabs[3])

&#9;-- enforce ordering of t1 &lt; t2 &lt; t3 [assumed]
&#9;--if x1 &gt; x3 then temp = x1 x1 = x3 x3 = temp end
&#9;--if y1 &gt; y3 then temp = y1 y1 = y3 y3 = temp end
&#9;--if z1 &gt; z3 then temp = z1 z1 = z3 z3 = temp end

&#9;-- set up xyz tables and indices
&#9;local xtable = {x1, x2, x3}
&#9;local ytable = {y1, y2, y3}
&#9;local ztable = {z1, z2, z3}

&#9;--print(xtable[1], xtable[2], xtable[3])
&#9;--print(ytable[1], ytable[2], ytable[3])
&#9;--print(ztable[1], ztable[2], ztable[3])

&#9;local xIndex = 1
&#9;local yIndex = 1
&#9;local zIndex = 1

&#9;-- loop:
&#9;while xIndex &lt; 3 and yIndex &lt; 3 and zIndex &lt; 3 do
&#9;&#9;-- update pointers
&#9;&#9;while xIndex &lt; 3 and (xtable[xIndex+1] &lt;= ytable[yIndex] or xtable[xIndex+1] &lt;= ztable[zIndex]) do xIndex = xIndex + 1 end
&#9;&#9;while yIndex &lt; 3 and (ytable[yIndex+1] &lt;= xtable[xIndex] or ytable[yIndex+1] &lt;= ztable[zIndex]) do yIndex = yIndex + 1 end
&#9;&#9;while zIndex &lt; 3 and (ztable[zIndex+1] &lt;= xtable[xIndex] or ztable[zIndex+1] &lt;= ytable[yIndex]) do zIndex = zIndex + 1 end
&#9;&#9;if xIndex &lt; 3 and yIndex &lt; 3 and zIndex &lt; 3 then 
&#9;&#9;&#9;if checkBox(xIndex, yIndex, zIndex, xSlabs, ySlabs, zSlabs) then  -- if there&apos;s a box in that gridsquare
&#9;&#9;&#9;&#9;-- find the latest ray-entry time and return which axis that was on, as well as the hit-point of the ray

&#9;&#9;&#9;&#9;local boxFrame = CFrame.new(Vector3.new((xSlabs[xIndex] + xSlabs[xIndex+1])/2, (ySlabs[yIndex] + ySlabs[yIndex+1])/2, (zSlabs[zIndex] + zSlabs[zIndex+1])/2))

&#9;&#9;&#9;&#9;if xtable[xIndex] &gt; ytable[yIndex] then
&#9;&#9;&#9;&#9;&#9;if xtable[xIndex] &gt; ztable[zIndex] then
&#9;&#9;&#9;&#9;&#9;&#9;return boxFrame, calcRay(p, dir, xtable[xIndex]), 1
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;return boxFrame, calcRay(p, dir, ztable[zIndex]), 3
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;if ytable[yIndex] &gt; ztable[zIndex] then
&#9;&#9;&#9;&#9;&#9;&#9;return boxFrame, calcRay(p, dir, ytable[yIndex]), 2
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;return boxFrame, calcRay(p, dir, ztable[zIndex]), 3
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;-- advance one pointer by one in direction of smallest next value
&#9;&#9;&#9;if xtable[xIndex + 1] &lt; ytable[yIndex + 1] then
&#9;&#9;&#9;&#9;if xtable[xIndex + 1] &lt; ztable[zIndex + 1] then
&#9;&#9;&#9;&#9;&#9;xIndex = xIndex + 1
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;zIndex = zIndex + 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;if ytable[yIndex + 1] &lt; ztable[zIndex + 1] then
&#9;&#9;&#9;&#9;&#9;yIndex = yIndex + 1
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;zIndex = zIndex + 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;-- algorithm: can order all of these 9 values, and step through them in order, whenever we see an x2, y2, or z2, we move that direction in our grid of cubes to check
&#9;--            only after we&apos;ve seen all 1-values do we start checking cubes, and as soon as we see an x3 value we stop.  By &quot;checking cubes&quot; I mean that if that grid space
&#9;--            doesn&apos;t have a cube, we continue, and if it does, then we return that cube and surface as our hit :).  (which axis was our the last value we saw [and direction of our ray] determines the surface we hit).

&#9;--local latestStartTime = math.max(x1, y1, z1)
&#9;return nil, nil, 0 -- no collisions
end

function getClusterAdjustedRaycast(mouseHitInWorld)
&#9;&#9;-- Note: we assume cluster is positioned with center at &lt;0,0,0&gt;

&#9;&#9;local mouseRay = mouseHitInWorld - game.Workspace.CurrentCamera.CoordinateFrame.p
&#9;&#9;local clusterSize = cluster:GetTerrainSizeInStuds()

&#9;&#9;mouseHitInWorld = mouseHitInWorld + clusterSize/2

&#9;&#9;-- test after filling out slabs below
&#9;&#9;local xSlabs = {}
&#9;&#9;local ySlabs = {}
&#9;&#9;local zSlabs = {}
&#9;&#9;if mouseRay.X &gt; 0 then
&#9;&#9;&#9;xSlabs[1] = 4*math.floor(mouseHitInWorld.X/4) - 4 - clusterSize.X/2
&#9;&#9;&#9;xSlabs[2] = xSlabs[1] + 4
&#9;&#9;&#9;xSlabs[3] = xSlabs[1] + 8
&#9;&#9;else
&#9;&#9;&#9;xSlabs[1] = 4*math.ceil(mouseHitInWorld.X/4) + 4 - clusterSize.X/2
&#9;&#9;&#9;xSlabs[2] = xSlabs[1] - 4
&#9;&#9;&#9;xSlabs[3] = xSlabs[1] - 8
&#9;&#9;end

&#9;&#9;if mouseRay.Y &gt; 0 then
&#9;&#9;&#9;ySlabs[1] = 4*math.floor(mouseHitInWorld.Y/4) - 4 - clusterSize.Y/2
&#9;&#9;&#9;ySlabs[2] = ySlabs[1] + 4
&#9;&#9;&#9;ySlabs[3] = ySlabs[1] + 8
&#9;&#9;else
&#9;&#9;&#9;ySlabs[1] = 4*math.ceil(mouseHitInWorld.Y/4) + 4 - clusterSize.Y/2
&#9;&#9;&#9;ySlabs[2] = ySlabs[1] - 4
&#9;&#9;&#9;ySlabs[3] = ySlabs[1] - 8
&#9;&#9;end

&#9;&#9;if mouseRay.Z &gt; 0 then
&#9;&#9;&#9;zSlabs[1] = 4*math.floor(mouseHitInWorld.Z/4) - 4 - clusterSize.Z/2
&#9;&#9;&#9;zSlabs[2] = zSlabs[1] + 4
&#9;&#9;&#9;zSlabs[3] = zSlabs[1] + 8
&#9;&#9;else
&#9;&#9;&#9;zSlabs[1] = 4*math.ceil(mouseHitInWorld.Z/4) + 4 - clusterSize.Z/2
&#9;&#9;&#9;zSlabs[2] = zSlabs[1] - 4
&#9;&#9;&#9;zSlabs[3] = zSlabs[1] - 8
&#9;&#9;end

&#9;&#9;return getRayAABBCollisions(game.Workspace.CurrentCamera.CoordinateFrame.p, mouseRay.unit, xSlabs, ySlabs, zSlabs)
end


function on3dMouseMove(mouse) 
&#9;if isRestricted then
&#9;&#9;mouse.TargetFilter = game.Workspace.BaseplateBumpers
&#9;else
&#9;&#9;mouse.TargetFilter = megaClusterSelectionBox
&#9;end
&#9;local part = mouse.Target

&#9;if not part then
&#9;&#9;clearSelection() 
&#9;&#9;return
&#9;elseif part:IsA(&quot;Cluster&quot;) then
&#9;&#9;if not cluster then cluster = game:GetService(&quot;TerrainService&quot;) end
&#9;&#9;local cellBox = getClusterAdjustedRaycast(mouse.Hit.p)
&#9;&#9;print(cellBox)
&#9;&#9;if not cellBox then clearSelection() return end
&#9;&#9;megaClusterSelectionBox.CFrame = cellBox

&#9;&#9;if isRestricted then megaClusterSelectionBox.Parent = game.Workspace.BaseplateBumpers else megaClusterSelectionBox.Parent = game.Workspace end
&#9;&#9;selectionBox.Adornee = megaClusterSelectionBox
&#9;elseif canDeleteObject(part) then
&#9;&#9;local model = findModel(part)
&#9;&#9;if model then &#9;&#9;
&#9;&#9;&#9;selectionBox.Color = BrickColor.Red()
&#9;&#9;&#9;setSelection(model)
&#9;&#9;else
&#9;&#9;&#9;selectionBox.Color = BrickColor.Red()
&#9;&#9;&#9;setSelection(part)
&#9;&#9;end
&#9;else
&#9;&#9;clearSelection()
&#9;end
end

local equipCount = 0
function onEquippedLocal(mouse)
&#9;equipCount = equipCount + 1
&#9;local val = equipCount

&#9;if isRestricted then
&#9;&#9;waitForChild(game.Workspace, &quot;BuildingAreas&quot;)
&#9;&#9;if val ~= equipCount then
&#9;&#9;&#9;return
&#9;&#9;end
&#9;end

&#9;local character = script.Parent.Parent
&#9;player = game.Players:GetPlayerFromCharacter(character)
&#9;
&#9;if not player then return end

&#9;if isRestricted then
&#9;&#9;local takenAreas = game.Workspace.BuildingAreas:GetChildren()
&#9;&#9;for i = 1, #takenAreas do
&#9;&#9;&#9;&#9;if takenAreas[i]:FindFirstChild(&quot;Player&quot;) ~= nil then  -- Test if child exists (to fix current bug: &quot;Player&quot; child is omitted from 1 baseplate at random, when played online.)
&#9;&#9;&#9;&#9;&#9;if takenAreas[i].Player.Value == Tool.Parent.Name then
&#9;&#9;&#9;&#9;&#9;&#9;buildingPlate = takenAreas[i].PlayerArea.BasePlate
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

   if buildingPlate then
&#9;&#9;playerModel  = buildingPlate.Parent
&#9;else
&#9;&#9;--playerModel  = nil
&#9;&#9;playerModel = game.Workspace
&#9;end
&#9;guiMain = Instance.new(&quot;ScreenGui&quot;)
&#9;guiMain.Parent = player.PlayerGui

&#9;mouse.Button1Down:connect(function() on3dButton1Down(mouse) end)
&#9;mouse.Move:connect(function() on3dMouseMove(mouse) end)
&#9;mouse.Icon =&quot;rbxasset://textures\\HammerCursor.png&quot;

&#9;selectionBox = Instance.new(&quot;SelectionBox&quot;)
&#9;selectionBox.Name = &quot;Model Delete Selection&quot;
&#9;selectionBox.Color = BrickColor.Red()
&#9;selectionBox.Adornee = nil
&#9;selectionBox.Parent = player.PlayerGui

&#9;selectionLasso = Instance.new(&quot;SelectionPartLasso&quot;)
&#9;selectionLasso.Name = &quot;Model Delete Lasso&quot;
&#9;selectionLasso.Humanoid = character.Humanoid
&#9;selectionLasso.archivable = false
&#9;selectionLasso.Visible = true
&#9;selectionLasso.Parent = game.workspace
&#9;selectionLasso.Color = BrickColor.Red()

&#9;highlight = true
end

function onUnequippedLocal()
&#9;highlight = false
&#9;if selectionBox then
&#9;&#9;clearSelection()
&#9;&#9;selectionBox:Remove()
&#9;end
&#9;if selectionLasso then selectionLasso:Remove() end
end


Tool.Equipped:connect(onEquippedLocal)
Tool.Unequipped:connect(onUnequippedLocal)
</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX5">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">SwordScript</string>
				<ProtectedString name="Source">-------- OMG HAX

r = game:service(&quot;RunService&quot;)


local damage = 0


local slash_damage = 0


sword = script.Parent.Handle
Tool = script.Parent



function attack()
&#9;local anim = Instance.new(&quot;StringValue&quot;)
&#9;anim.Name = &quot;toolanim&quot;
&#9;anim.Value = &quot;Slash&quot;
&#9;anim.Parent = Tool
end


function swordUp()
&#9;Tool.GripForward = Vector3.new(-1,0,0)
&#9;Tool.GripRight = Vector3.new(0,1,0)
&#9;Tool.GripUp = Vector3.new(0,0,1)
end

function swordOut()
&#9;Tool.GripForward = Vector3.new(0,0,1)
&#9;Tool.GripRight = Vector3.new(0,-1,0)
&#9;Tool.GripUp = Vector3.new(-1,0,0)
end



Tool.Enabled = true

function onActivated()

&#9;if not Tool.Enabled then
&#9;&#9;return
&#9;end

&#9;Tool.Enabled = false

&#9;local character = Tool.Parent;
&#9;local humanoid = character.Humanoid
&#9;if humanoid == nil then
&#9;&#9;return 
&#9;end

&#9;

&#9;attack()

&#9;wait(1)

&#9;Tool.Enabled = true
end


script.Parent.Activated:connect(onActivated)

</ProtectedString>
			</Properties>
		</Item>
		<Item class="BoolValue" referent="RBX6">
			<Properties>
				<bool name="Archivable">true</bool>
				<string name="Name">IsRestricted</string>
				<bool name="Value">false</bool>
			</Properties>
		</Item>
		<Item class="BoolValue" referent="RBX7">
			<Properties>
				<bool name="Archivable">true</bool>
				<string name="Name">AutoWedgeClusterParts</string>
				<bool name="Value">false</bool>
			</Properties>
		</Item>
	</Item>
</roblox>