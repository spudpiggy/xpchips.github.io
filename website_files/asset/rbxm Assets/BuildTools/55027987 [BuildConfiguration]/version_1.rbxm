<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX0">
		<Properties>
			<bool name="Archivable">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>-0.699999988</Z>
				<R00>-0</R00>
				<R01>0</R01>
				<R02>1</R02>
				<R10>1</R10>
				<R11>-0</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>1</R21>
				<R22>0</R22>
			</CoordinateFrame>
			<string name="Name">BuildConfiguration</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=51744223</url></Content>
		</Properties>
		<Item class="Script" referent="RBX1">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">SwordScript</string>
				<ProtectedString name="Source">-------- OMG HAX

r = game:service(&quot;RunService&quot;)


local damage = 0


local slash_damage = 0


sword = script.Parent.Handle
Tool = script.Parent



function attack()
	local anim = Instance.new(&quot;StringValue&quot;)
	anim.Name = &quot;toolanim&quot;
	anim.Value = &quot;Slash&quot;
	anim.Parent = Tool
end


function swordUp()
	Tool.GripForward = Vector3.new(-1,0,0)
	Tool.GripRight = Vector3.new(0,1,0)
	Tool.GripUp = Vector3.new(0,0,1)
end

function swordOut()
	Tool.GripForward = Vector3.new(0,0,1)
	Tool.GripRight = Vector3.new(0,-1,0)
	Tool.GripUp = Vector3.new(-1,0,0)
end



Tool.Enabled = true

function onActivated()

	if not Tool.Enabled then
		return
	end

	Tool.Enabled = false

	local character = Tool.Parent;
	local humanoid = character.Humanoid
	if humanoid == nil then
		print(&quot;Humanoid not found&quot;)
		return 
	end

	

	attack()

	wait(1)

	Tool.Enabled = true
end


function onEquipped()
end


script.Parent.Activated:connect(onActivated)
script.Parent.Equipped:connect(onEquipped)

</ProtectedString>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX2">
			<Properties>
				<bool name="Anchored">false</bool>
				<bool name="Archivable">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">199</int>
				<CoordinateFrame name="CFrame">
					<X>-35</X>
					<Y>1.60000002</Y>
					<Z>3.5</Z>
					<R00>0</R00>
					<R01>0</R01>
					<R02>-1</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>1</R20>
					<R21>0</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>0.800000012</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX3">
				<Properties>
					<bool name="Archivable">true</bool>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=16884681</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.600000024</X>
						<Y>0.600000024</Y>
						<Z>0.600000024</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=16884673</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX4">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Configuration Local</string>
				<ProtectedString name="Source">-- general functions
function waitForProperty(instance, name)
	while not instance[name] do
		instance.Changed:wait()
	end
end
function waitForChild(instance, name)
	while not instance:FindFirstChild(name) do
		instance.ChildAdded:wait()
	end
end

local RbxGui
if LoadLibrary then
	RbxGui = LoadLibrary(&quot;RbxGui&quot;)
else
	return
end

local Tool = script.Parent

enabled = true
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/configure_sel.png&quot;)

local selectionLasso
local selectionBox
local guiMain
local screen

local selectionGui
local hintGui
local player
local playerArea

local lastConfig = nil
local lastVehicleSeat = nil
local origValueMap = {}

local valueConnections = {}

local objectValueSelect = {}

local colorPaletteSelectMode = false

local textSize = 5

--Constants
local width = UDim.new(3, 0)
local height = 20 
local transparency = 0.5
local buttonColor = BrickColor.new(&quot;Mid gray&quot;)
local frameColor = BrickColor.new(&quot;Pastel yellow&quot;)

function constrained(valueObject)
	return (valueObject:IsA(&quot;IntConstrainedValue&quot;) or valueObject:IsA(&quot;DoubleConstrainedValue&quot;))
end

function sharedProcess(name, parentFrame)
	local subFrame = Instance.new(&quot;Frame&quot;)
	subFrame.Name = name
	subFrame.Size = UDim2.new(1.0, 0, 0, height)
	subFrame.BackgroundTransparency = 1.0
	subFrame.BorderSizePixel = 0
	
	local label = Instance.new(&quot;TextLabel&quot;)
	label.Font = Enum.Font.ArialBold
	label.Position = UDim2.new(0.0, 0, 0.0, 0)
	label.Size = UDim2.new(0.5, 0, 1.0, 0)
	label.FontSize = textSize
	label.TextColor = BrickColor.White()
	label.Text = name
	label.Parent = subFrame
	label.BackgroundTransparency = 1.0
	label.BorderSizePixel = 0

	return subFrame
end

function createTextBox(size, text)
	local textBox = Instance.new(&quot;TextBox&quot;)
	textBox.Position = UDim2.new(0.5, 1, 0.0, 1)
	textBox.Size = size
	textBox.BackgroundTransparency = 1
	textBox.FontSize = textSize - 3
	textBox.TextColor3 = Color3.new(1,1,1)
	textBox.Text = text	
	textBox.ZIndex = 2

	local textBoxBacking = Instance.new(&quot;TextButton&quot;)
	textBoxBacking.Text = &quot;&quot;
	textBoxBacking.Style = Enum.ButtonStyle.RobloxButtonDefault
	textBoxBacking.Size = UDim2.new(1,0,1,0)
	textBoxBacking.Parent = textBox

	return textBox
end

function setCheckBoxValue(checkBox, value)
	if value then
		checkBox.Text = &quot;X&quot;
	else
		checkBox.Text = &quot;&quot;
	end
end
function createCheckBox(value)
	local checkBox = Instance.new(&quot;TextButton&quot;)
	checkBox.Position = UDim2.new(0.75, -(height-4)/2, 0.0, 2)
	checkBox.Size = UDim2.new(0.0, height-4, 0.0, height-4)
	checkBox.Style = Enum.ButtonStyle.RobloxButtonDefault
	checkBox.TextColor3 = Color3.new(1,1,1)
	checkBox.FontSize = textSize
	setCheckBoxValue(checkBox, value)
	return checkBox
end



function processBoolValue(value, guiFrame)
	local subFrame = sharedProcess(value.Name, guiFrame)
	local checkBox = createCheckBox(value.Value)
	
	--Tie the two values together... we&apos;ll need to break these connections later
	checkBox.MouseButton1Down:connect(function() value.Value = not(value.Value) end)
	valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) setCheckBoxValue(checkBox, newValue) end)	
	checkBox.Parent = subFrame
	return subFrame
end

function processConstrainedNumberValue(value, guiFrame)
	local subFrame = sharedProcess(value.Name, guiFrame)
	local textBox = createTextBox(UDim2.new(0.5,-2, 1.0, -2), value.ConstrainedValue, function(textBox) value.ConstrainedValue = textBox.Text end)
	textBox.Name = value.Name

	--Tie the two values together... we&apos;ll need to break these connections later
	textBox.Changed:connect(function(prop)
		if prop == &quot;Text&quot; then
			local prevValue = value.ConstrainedValue
			if textBox.Text ~= &quot;&quot; then
				pcall(function() value.ConstrainedValue = textBox.Text end)
			end
			textBox.Text = value.ConstrainedValue
		end
	end)
	valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) textBox.Text = newValue end)
	
	textBox.Parent = subFrame
	return subFrame;
end

function processIntValue(value, guiFrame)
	local subFrame = sharedProcess(value.Name, guiFrame)
	local textBox = createTextBox(UDim2.new(0.5,-2, 1.0, -2), value.Value, function(textBox) value.Value = textBox.Text end)
	textBox.Name = value.Name

	--Tie the two values together... we&apos;ll need to break these connections later
	textBox.Changed:connect(function(prop)
		if prop == &quot;Text&quot; then
			local prevValue = value.Value
			if textBox.Text ~= &quot;&quot; then
				pcall(function() value.Value = textBox.Text end)
			end
			textBox.Text = value.Value
		end
	end)
	valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) textBox.Text = newValue end)
	
	textBox.Parent = subFrame
	return subFrame;
end

function processPropertyValue(object, name, field, guiFrame)
	origValueMap[name] = object[field]

	local subFrame = sharedProcess(name, guiFrame)
	local textBox = createTextBox(UDim2.new(0.5,-2, 1.0, -2), object[field], function(textBox) object[field] = textBox.Text end)
	textBox.Name = name

	--Tie the two values together... we&apos;ll need to break these connections later
	textBox.Changed:connect(function(prop) 
		if prop == &quot;Text&quot; then
			if textBox.Text ~= &quot;&quot; then
				local success = pcall(function() object[field] = textBox.Text end)
			end
			textBox.Text = object[field]
		end
	end)

	valueConnections[#valueConnections+1] = object.Changed:connect(function(property) if property == field then textBox.Text = object[field] end end)
	
	textBox.Parent = subFrame
	return subFrame
end


function processEnumValue(value, guiFrame)
	local subFrame = sharedProcess(value.Name, guiFrame)

	local valueChildren = value:GetChildren()
	local enumNames = {}
	for i = 1, #valueChildren do
		if valueChildren[i]:IsA(&quot;BoolValue&quot;) and valueChildren[i].Value == true then
			table.insert(enumNames,valueChildren[i].Name)
		end
	end

	local valueToChange = value
	local enumSelect = function(item)
		valueToChange.Value = tostring(item)
	end

	local dropDownEnumMenu, updateEnumSelection = RbxGui.CreateDropDownMenu(enumNames, enumSelect)
	dropDownEnumMenu.Position = UDim2.new(0.5,0,0,0)
	dropDownEnumMenu.Size = UDim2.new(0.5,0,0,20)
	dropDownEnumMenu.Parent = subFrame

	for i = 1, #valueChildren do
		if value.Value == valueChildren[i].Name then
			dropDownEnumMenu.DropDownMenuButton.Text = valueChildren[i].Name
			break
		end
	end

	return subFrame
end



function processNumberValue(value, guiFrame)
	return processIntValue(value, guiFrame)
end


function processStringValue(value, guiFrame)
	return processIntValue(value, guiFrame)
end



function onMouseLeave(hoverSelection, selectedButtonTable, oldButton)
	if oldButton[0] then
		local notSelected = true;
		local selectionText = &quot;&quot;;
		for key, value in pairs(selectedButtonTable) do
			if oldButton[0] == value then
				notSelected = false
			else
				selectionText = value.BackgroundColor.Name;
			end
		end
		if notSelected then
			hoverSelection.Text = selectionText;
			oldButton[0].Parent.BackgroundColor = BrickColor.Black();
		end
	end
	oldButton[0] = nil
end

function onMouseEnter(hoverSelection, guiButton, selectedButtonTable, oldButton)
	onMouseLeave(hoverSelection, selectedButtonTable, oldButton)
	hoverSelection.Text = guiButton.BackgroundColor.Name
	if guiButton ~= selectedButton then
		guiButton.Parent.BackgroundColor = BrickColor.White();
		oldButton[0] = guiButton
	end
end

function changeColorSelection(colorHolder, paletteFrame, guiButton, selectedButtonTable)
	if selectedButtonTable[colorHolder] ~= nil then
		selectedButtonTable[colorHolder].Parent.BackgroundColor = BrickColor.Black();
	end

	guiButton.Parent.BackgroundColor = BrickColor.Yellow();
	colorHolder.BackgroundColor = guiButton.BackgroundColor
	selectedButtonTable[colorHolder] = guiButton
end

function onMouseUp(colorHolder, paletteFrame, guiButton, selectedButtonTable)
	changeColorSelection(colorHolder, paletteFrame, guiButton, selectedButtonTable)

	onMouseLeavePalette(paletteFrame)
end

function onShowColorDialog(paletteFrame)
	paletteFrame.Visible = not(paletteFrame.Visible)
	colorPaletteSelectMode = true
end


function onMouseEnterPalette(mouse)
	colorPaletteSelectMode = true
end
function onMouseLeavePalette(paletteFrame)
	colorPaletteSelectMode = false
	paletteFrame.Visible = false
end

function processBrickColorValue(value, guiFrame)
	local subFrame = sharedProcess(value.Name, guiFrame)

	local sideBar = Instance.new(&quot;Frame&quot;)
	sideBar.Position = UDim2.new(0.5, 0, 0.0, 0)
	sideBar.Size = UDim2.new(0.5, 0, 1.0, 0)
	sideBar.BackgroundTransparency = 1.0
	sideBar.Parent = subFrame
	sideBar.BorderSizePixel = 0

	local primaryColor = Instance.new(&quot;TextButton&quot;)
	primaryColor.Position = UDim2.new(0.0, 1, 0.0, 1)
	primaryColor.Size = UDim2.new(0.0, height-2, 0, height-2)
	primaryColor.Text  = &quot;&quot;	
	primaryColor.FontSize = textSize
	primaryColor.BackgroundColor = value.Value
	primaryColor.BorderColor = BrickColor.Black()
	primaryColor.Parent = sideBar

	local hoverSelection = Instance.new(&quot;TextLabel&quot;)
	hoverSelection.Position = UDim2.new(0.0, height+2, 0.0, 0)
	hoverSelection.Size = UDim2.new(1.0, -height - 4, 1.0, 0)
	hoverSelection.Text = &quot;&quot;
	hoverSelection.Font = Enum.Font.ArialBold
	hoverSelection.FontSize = textSize
	hoverSelection.BackgroundTransparency = 1.0
	hoverSelection.BorderSizePixel = 0
	hoverSelection.TextColor = BrickColor.White()
	hoverSelection.Text = primaryColor.BackgroundColor.Name;
	hoverSelection.Parent = sideBar

	local paletteFrame = Instance.new(&quot;Frame&quot;)
	paletteFrame.Position = UDim2.new(primaryColor.Position.X.Scale, primaryColor.Position.X.Offset + height, primaryColor.Position.Y.Scale, primaryColor.Position.Y.Offset - height*7)
	paletteFrame.Size = UDim2.new(0, height*8, 0, height*8)
	paletteFrame.BackgroundColor = BrickColor.White()
	paletteFrame.BorderColor = BrickColor.White()
	paletteFrame.Visible = false;
	paletteFrame.Parent = sideBar
	paletteFrame.ZIndex = 2
	paletteFrame.MouseEnter:connect(function() onMouseEnterPalette(mouse) end)
	paletteFrame.MouseLeave:connect(function() onMouseLeavePalette(paletteFrame, mouse) end)

	primaryColor.MouseButton1Down:connect(function() onShowColorDialog(paletteFrame) end)

	local selectedButtonTable = {}
	local colorButtonTable = {}
	local oldButton = {}
	for xOffset = 0, 7 do
		for yOffset = 0,7 do
			local guiFrame = Instance.new(&quot;Frame&quot;)
			guiFrame.Position = UDim2.new(1.0/8 * xOffset, 0, 1.0/8*yOffset, 0)
			guiFrame.Size = UDim2.new(1.0/8, 0, 1.0/8, 0)
			guiFrame.BackgroundColor = BrickColor.White();
			guiFrame.BorderSizePixel = 0
			guiFrame.Parent = paletteFrame;
			guiFrame.ZIndex = 2
		
			local guiButton = Instance.new(&quot;TextButton&quot;)
			guiButton.FontSize = textSize
			guiButton.Position = UDim2.new(0.0, 1, 0.0, 1)
			guiButton.Size = UDim2.new(1.0, -2, 1.0, -2)
			guiButton.Text = &quot;&quot;
			guiButton.BorderSizePixel = 0
			guiButton.AutoButtonColor = false
			local color = BrickColor.palette(xOffset + yOffset*8)
			colorButtonTable[color.Number] = guiButton
			guiButton.BackgroundColor = color
			guiButton.MouseEnter:connect(function() onMouseEnter(hoverSelection, guiButton, selectedButtonTable, oldButton) end)
			guiButton.MouseButton1Up:connect(function() onMouseUp(primaryColor, paletteFrame, guiButton, selectedButtonTable, oldButton) end)
			guiButton.MouseButton1Up:connect(function() value.Value = guiButton.BackgroundColor end)
			guiButton.Parent = guiFrame
			guiButton.ZIndex = 2

			if guiButton.BackgroundColor == primaryColor.BackgroundColor then
				guiFrame.BackgroundColor = BrickColor.White()
				selectedButtonTable[primaryColor] = guiButton
			end
		end
	end

	valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) changeColorSelection(primaryColor, paletteFrame, colorButtonTable[newValue.Number], selectedButtonTable) end)	
	return subFrame
end


function onObjectValueMouseClick(guiFrame, value, objectButton)
	objectValueSelect[&quot;Value&quot;] = value
	objectValueSelect[&quot;Frame&quot;] = guiFrame
	objectValueSelect[&quot;Enabled&quot;] = true

	onObjectValueMouseLeave(value, objectButton)
end

function onObjectValueMouseEnter(value, objectButton)
	objectValueSelect[&quot;HoverBox&quot;].Adornee = value.Value
	objectValueSelect[&quot;HoverValue&quot;] = value
	if value.Value then
		objectButton.BackgroundColor = BrickColor.Blue()
	else
		objectButton.BackgroundColor = BrickColor.White()
	end
end
	
function onObjectValueMouseLeave(value, objectButton)
	if objectValueSelect[&quot;HoverValue&quot;] == value then
		objectValueSelect[&quot;HoverBox&quot;].Adornee = nil
		objectValueSelect[&quot;HoverValue&quot;] = nil
	end
	objectButton.BackgroundColor = buttonColor
end

function onObjectValueCancel()
	if objectValueSelect[&quot;Enabled&quot;] then
		objectValueSelect[&quot;Enabled&quot;] = false

		objectValueSelect[&quot;Box&quot;].Adornee = nil
		objectValueSelect[&quot;Frame&quot;].Visible = true
		objectValueSelect[&quot;Frame&quot;] = nil
		objectValueSelect[&quot;Value&quot;] = nil
	end
end

function on3dObjectValueButton1Up(mouse, guiMain)
	local part = mouse.Target
	if part ~= nil then
		objectValueSelect[&quot;Value&quot;].Value = part

		objectValueSelect[&quot;Enabled&quot;] = false

		objectValueSelect[&quot;Box&quot;].Adornee = nil
		objectValueSelect[&quot;Frame&quot;].Visible = true

		objectValueSelect[&quot;Frame&quot;] = nil
		objectValueSelect[&quot;Value&quot;] = nil
	end
end

function on3dObjectValueMouseMove(mouse, guiMain)
	local part = mouse.Target
	if part and part ~= objectValueSelect[&quot;Box&quot;].Adornee then
		objectValueSelect[&quot;Box&quot;].Adornee = part
	end
end

function setObjectButtonText(guiFrame, objectButton, objectValue)
	if objectValueSelect[&quot;Enabled&quot;] and objectValue == objectValueSelect[&quot;Value&quot;] then
		guiFrame.Visible = true
		objectValueSelect[&quot;Enabled&quot;] = false
		objectValueSelect[&quot;Value&quot;] = nil
	end

	if  objectValue.Value ~= nil then
		objectButton.Text = objectValue.Value.Name
	else
		objectButton.Text = &quot;[nil]&quot;
	end
	objectButton.BackgroundColor = buttonColor
end

function processObjectValue(value, playerGui, guiFrame)
	local subFrame = sharedProcess(value.Name, guiFrame)
	local objectButton = Instance.new(&quot;TextButton&quot;)
	objectButton.FontSize = textSize
	objectButton.Position = UDim2.new(0.5, 2, 0.0, 2)
	objectButton.Size = UDim2.new(0.5, -4, 1.0, -4)
	objectButton.BackgroundColor = BrickColor.White()
	objectButton.TextColor = BrickColor.Black()
	objectButton.Parent = subFrame
	objectButton.AutoButtonColor = false

	objectButton.MouseButton1Click:connect(function() onObjectValueMouseClick(guiFrame, value, objectButton) end)
	objectButton.MouseEnter:connect(function() onObjectValueMouseEnter(value, objectButton) end)
	objectButton.MouseLeave:connect(function() onObjectValueMouseLeave(value, objectButton) end)

	valueConnections[#valueConnections+1] = value.Changed:connect(function(newObjectValue) setObjectButtonText(guiFrame, objectButton, value) end)	

	setObjectButtonText(guiFrame, objectButton, value)
	return subFrame
end


function processValue(value, playerGui, guiFrame)
	if constrained(value) then origValueMap[value.Name] = value.ConstrainedValue
	else origValueMap[value.Name] = value.Value end

	if #value:GetChildren() &gt; 0 and value:IsA(&quot;StringValue&quot;) then
		return processEnumValue(value, guiFrame)
	else
		if value.className == &quot;BoolValue&quot; then
			return processBoolValue(value, guiFrame)
		elseif value.className == &quot;IntValue&quot; then
			return processIntValue(value, guiFrame)
		elseif value.className == &quot;NumberValue&quot; then
			return processNumberValue(value, guiFrame)
		elseif value.className == &quot;StringValue&quot; then
			return processStringValue(value, guiFrame)
		elseif value.className == &quot;ObjectValue&quot; then
			return processObjectValue(value, playerGui, guiFrame)
		elseif value.className == &quot;BrickColorValue&quot; then
			return processBrickColorValue(value, guiFrame)
		elseif value.className == &quot;IntConstrainedValue&quot; or value.className == &quot;DoubleConstrainedValue&quot; then
			return processConstrainedNumberValue(value, guiFrame)
		else
			return nil
		end
	end
end

function sharedMain(name, playerGui)
	local parentFrame = Instance.new(&quot;Frame&quot;)
	parentFrame.Style = Enum.FrameStyle.RobloxRound
	parentFrame.Active = true
	parentFrame.Name = &quot;MainFrame&quot;
	parentFrame.BackgroundTransparency = 1

	local titleLabel = Instance.new(&quot;TextLabel&quot;)
	titleLabel.Name = &quot;TitleLabel&quot;
	titleLabel.Font = Enum.Font.ArialBold
	titleLabel.FontSize = textSize + 2
	titleLabel.Size = UDim2.new(1.0, 0.0, 0.0, height)
	titleLabel.TextColor = BrickColor.White()
	titleLabel.BackgroundColor = BrickColor.new(&quot;Cool yellow&quot;)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = name
	titleLabel.Parent = parentFrame

	return parentFrame
end

function sharedButtons(parentFrame, valueChildren)
	local buttonFrame = Instance.new(&quot;Frame&quot;)
	buttonFrame.Name = &quot;Buttons&quot;
	buttonFrame.BackgroundTransparency = 1.0
	buttonFrame.Size = UDim2.new(1.0, 0.0, 0.0, height)
	buttonFrame.Position = UDim2.new(0.0, 0, 0.0, valueChildren*height)
	buttonFrame.Parent = parentFrame
	valueChildren = valueChildren + 1

	local okButton = Instance.new(&quot;TextButton&quot;)
	okButton.FontSize = textSize
	okButton.Name = &quot;OkButton&quot;
	okButton.Font = Enum.Font.ArialBold
	okButton.TextColor = BrickColor.White()
	okButton.Style = Enum.ButtonStyle.RobloxButton
	okButton.Text = &quot;Ok&quot;
	okButton.Size = UDim2.new(.25, -4, 0.0, height + 5)
	okButton.Position = UDim2.new(0.55, 2, 0.0, 2)
	okButton.BackgroundColor = buttonColor
	okButton.MouseButton1Click:connect(function() removeSelectionGui() end)
	okButton.Parent = buttonFrame

	local cancelButton = okButton:clone()
	cancelButton.Name = &quot;cancelButton&quot;
	cancelButton.Text  = &quot;Cancel&quot;
	cancelButton.Position = UDim2.new(0.200000003, 2, 0, 2)
	cancelButton.MouseButton1Click:connect(function() cancelSelectionGui() end)
	cancelButton.Parent = buttonFrame

	parentFrame.Size = UDim2.new(1, 0, 0, valueChildren*height + 20)
	parentFrame.Position = UDim2.new(0, 0, 1, -valueChildren*height - 20)
	
end

function processVehicleSeat(vehicleSeat, playerGui, valueChildren)
	local parentFrame = sharedMain(vehicleSeat.Name, playerGui)
	lastVehicleSeat = vehicleSeat

	local valueChildren = 1
	local fields = {&quot;MaxSpeed&quot;, &quot;Steer&quot;, &quot;Torque&quot;, &quot;TurnSpeed&quot;}
	for pos, field in pairs(fields) do
		local newFrame = processPropertyValue(vehicleSeat, field, field, guiFrame)
		if newFrame then
			newFrame.Position = UDim2.new(0.0, 0, 0.0, valueChildren*height)
			newFrame.Parent = parentFrame
			valueChildren = valueChildren + 1
		end

	end

	sharedButtons(parentFrame, valueChildren)
	return parentFrame
end

function processConfiguration(config, playerGui)
	local parentFrame = sharedMain(config.Name, playerGui)
	lastConfig = config

	local valueChildren = 1
	local children = config:GetChildren() 
	if children then
		for pos, child in pairs(children) do
			local newFrame = processValue(child, playerGui, parentFrame)
			if newFrame then
				newFrame.Position = UDim2.new(0.0, 0, 0.0, valueChildren*height)
				newFrame.Parent = parentFrame
				valueChildren = valueChildren + 1
			end
		end
	end
	
	sharedButtons(parentFrame, valueChildren)
	return parentFrame
end

function on3dMouseMove(mouse, guiMain)
	if objectValueSelect[&quot;Enabled&quot;] then
		on3dObjectValueMouseMove(mouse, guiMain)
	end
end

function cancelSelectionGui()
	if selectionGui ~= nil then
		selectionGui:Remove()
		selectionGui = nil
		for pos, connection in pairs(valueConnections) do
			connection:disconnect()
		end
		valueConnections = {}
	end

	selectionBox.Adornee = nil
	selectionLasso.Part = nil
	objectValueSelect[&quot;Box&quot;].Adornee = nil
	objectValueSelect[&quot;HoverBox&quot;].Adornee = nil
	hintGui.Visible = true

	showConfigurationAnnotations()

	if lastConfig then
		local configValues = lastConfig:getChildren()
		for i = 1, #configValues do
			if origValueMap[configValues[i].Name] ~= nil then
				if constrained(configValues[i]) then configValues[i].ConstrainedValue = origValueMap[configValues[i].Name]
				else configValues[i].Value = origValueMap[configValues[i].Name] end

				origValueMap[configValues[i].Name] = nil
			end
		end
	elseif lastVehicleSeat then
		lastVehicleSeat.MaxSpeed = origValueMap[&quot;MaxSpeed&quot;]
		origValueMap[&quot;MaxSpeed&quot;] = nil
		lastVehicleSeat.Steer = origValueMap[&quot;Steer&quot;]
		origValueMap[&quot;Steer&quot;] = nil
		lastVehicleSeat.Torque = origValueMap[&quot;Torque&quot;]
		origValueMap[&quot;Torque&quot;] = nil
		lastVehicleSeat.TurnSpeed = origValueMap[&quot;TurnSpeed&quot;]
		origValueMap[&quot;TurnSpeed&quot;] = nil
	end
end

function removeSelectionGui()
	if selectionGui ~= nil then
		selectionGui:Remove()
		selectionGui = nil
		for pos, connection in pairs(valueConnections) do
			connection:disconnect()
		end
		valueConnections = {}
	end

	selectionBox.Adornee = nil
	selectionLasso.Part = nil
	if objectValueSelect[&quot;Box&quot;] then objectValueSelect[&quot;Box&quot;].Adornee = nil end
	if objectValueSelect[&quot;HoverBox&quot;] then objectValueSelect[&quot;HoverBox&quot;].Adornee = nil end
	hintGui.Visible = true

	showConfigurationAnnotations()

	if lastConfig then
		local configValues = lastConfig:getChildren()
		for i = 1, #configValues do
			if origValueMap[configValues[i].Name] ~= nil then
				origValueMap[configValues[i].Name] = nil
			end
		end
	end
end



function canSelectObject(part)

	if Tool.IsRestricted.Value then
		waitForChild(playerArea,&quot;PlayerArea&quot;)
		if Tool.IsRestricted.Value and playerArea:FindFirstChild(&quot;PlayerArea&quot;) and part:IsDescendantOf(playerArea.PlayerArea) then
			return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
		else
			return false
		end
	end

	return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
end

local function isInModel(part)
	if part == game.Workspace then
		return false, nil
	elseif part:IsA(&quot;Model&quot;) then
		return true, part
	else
		return isInModel(part.Parent)
	end
end

local function findConfigInModel(model)
	local children = model:GetChildren()
	for i = 1, #children do
		if children[i]:IsA(&quot;Configuration&quot;) then
			return children[i]
		end
	end
	for i = 1, #children do
		return findConfigInModel(children[i])
	end
	return nil
end

function findConfiguration(part)
	local partInModel, model = isInModel(part)
	if partInModel then
		return findConfigInModel(model)
	else
		local children = part:GetChildren() 		
		if children then
			for pos, child in pairs(children) do
				if child:IsA(&quot;Configuration&quot;) then
					return child
				end
			end
		end
	end
	return nil
end


function on3dButton1Up(mouse, guiMain, playerGui)
	if objectValueSelect[&quot;Enabled&quot;] then
		on3dObjectValueButton1Up(mouse, guiMain)
		return
	elseif canSelectObject(mouse.Target) then
		local part = mouse.Target
		local foundPart = nil
		if part:IsA(&quot;VehicleSeat&quot;) then
			foundPart = part
		else
			foundPart = findConfiguration(part)
		end
	
		if foundPart then
			if selectionGui then
				cancelSelectionGui()
			end

			hideConfigurationAnnotations()

			if foundPart:IsA(&quot;Configuration&quot;) then
				selectionGui = processConfiguration(foundPart, playerGui)
			else
				selectionGui = processVehicleSeat(foundPart, playerGui)	
			end
			selectionGui.Parent = guiMain

			-- screen.Adornee = part

			selectionBox.Adornee = part
			--selectionLasso.Part = part  -- for now, we don&apos;t show the red lasso

			hintGui.Visible = false
			return
		end
	end
	
	cancelSelectionGui()
end
function on3dButton1Down(mouse, guiMain, playerGui)
end

function onEquippedLocal(mouse)
	local character = script.Parent.Parent
	player = game.Players:GetPlayerFromCharacter(character)

	if player == nil then return end

	if Tool.IsRestricted.Value then
		waitForChild(game.Workspace,&quot;BuildingAreas&quot;)
		waitForChild(game.Workspace.BuildingAreas,&quot;Area1&quot;)
		waitForChild(game.Workspace.BuildingAreas.Area1,&quot;Player&quot;)
		local areas = game.Workspace.BuildingAreas:GetChildren()
		for i = 1, #areas do
			if areas[i]:FindFirstChild(&quot;Player&quot;) and areas[i].Player.Value == player.Name then
				playerArea = areas[i]
				break
			end
		end
	end

	
	if not screen then
		screen = Instance.new(&quot;ScreenGui&quot;)
		--screen = Instance.new(&quot;BillboardGui&quot;)
		screen.Name = &quot;ConfigGui&quot;
		screen.Parent = player.PlayerGui

		guiMain = Instance.new(&quot;Frame&quot;)
		guiMain.BackgroundTransparency = 1
		guiMain.Size = UDim2.new(0,400,0,400)
		guiMain.Position = UDim2.new(0.5,-200,0.4,-200)
		guiMain.Parent = screen

		hintGui = Instance.new(&quot;ImageLabel&quot;)
		hintGui.Name = &quot;HintLabel&quot;
		hintGui.Image = &quot;http://www.roblox.com/asset/?id=36312091&quot;
		hintGui.Position = UDim2.new(0.35, 0, 0.8, 0)
		hintGui.Size = UDim2.new(0.3, 0, 0.2, 0)
		hintGui.BackgroundTransparency = 1
		hintGui.Parent = guiMain
		
		local reposition = script.Parent.Repositioner:clone()
		reposition.Parent = screen
		reposition.Disabled = false
	else
		screen.Parent = player.PlayerGui
		screen.Repositioner.Disabled = false
	end

	setUpConfigurationService(guiMain)
	showConfigurationAnnotations()

	mouse.Icon =&quot;rbxasset://textures\\DragCursor.png&quot;
	mouse.Button1Down:connect(function() on3dButton1Down(mouse, guiMain, player.PlayerGui) end)
	mouse.Button1Up:connect(function() on3dButton1Up(mouse, guiMain, player.PlayerGui) end)
	mouse.Move:connect(function() on3dMouseMove(mouse, guiMain) end)
	
	selectionBox = Instance.new(&quot;SelectionBox&quot;)
	selectionBox.Name = &quot;MainSelectionBox&quot;
	selectionBox.Color = BrickColor.Red()
	selectionBox.Adornee = nil
	selectionBox.Parent = player.PlayerGui;

	selectionLasso = Instance.new(&quot;SelectionPartLasso&quot;)
	selectionLasso.Name = &quot;Model Delete Lasso&quot;
	selectionLasso.Humanoid = character.Humanoid
	selectionLasso.Part = nil
	selectionLasso.Visible = true
	selectionLasso.archivable = false
	selectionLasso.Color = BrickColor.Red()
	selectionLasso.Parent = game.workspace

	objectValueSelect.HoverBox = Instance.new(&quot;SelectionBox&quot;)
	objectValueSelect.HoverBox.Name = &quot;HoverBox&quot;
	objectValueSelect.HoverBox.Color = BrickColor.Blue()
	objectValueSelect.HoverBox.Adornee = nil
	objectValueSelect.HoverBox.Parent = player.PlayerGui;

	objectValueSelect.Box = Instance.new(&quot;SelectionBox&quot;)
	objectValueSelect.Box.Name = &quot;Box&quot;
	objectValueSelect.Box.Color = BrickColor.Blue()
	objectValueSelect.Box.Adornee = nil
	objectValueSelect.Box.Parent = player.PlayerGui;
end

function onUnequippedLocal()

	destroyConfigurationService()

	removeSelectionGui()

	selectionBox:Remove()
	selectionLasso:Remove()
	objectValueSelect.Box:Remove()
	objectValueSelect.HoverBox:Remove()

	if screen then
		screen.Repositioner.Disabled = true
		screen.Parent = nil
	end

	player = nil

	objectValueSelect = {}
end


local configTable = {}

function createVisualAnnotation(config, guiMain)
	local selection = Instance.new(&quot;SelectionBox&quot;)
	selection.Name = &quot;Annotation&quot;
	selection.Color = BrickColor.Red()
	selection.Parent = guiMain.Parent
	return selection
end

function configurationParentChanged(data, part)
	--[[if part and (not(part:IsA(&quot;BasePart&quot;))) then
		--Not a legit part, get rid of it
		part = nil
	end]]

	data[&quot;VisualAnnotation&quot;].Adornee = part
end

function showConfigurationAnnotations()
	for config, data in pairs(configTable) do
		data[&quot;VisualAnnotation&quot;].Visible = true
	end
end


function hideConfigurationAnnotations()
	for config, data in pairs(configTable) do
		data[&quot;VisualAnnotation&quot;].Visible = false
	end
end

local function isInMyArea(part)
	if part.Parent == nil then return false end
	if part.Parent:FindFirstChild(&quot;Player&quot;) and part.Parent.Player:IsA(&quot;StringValue&quot;) then
		if part.Parent.Player.Value == player.Name then
			return true
		else
			return false
		end
	elseif part.Parent == game.Workspace.BuildingAreas or part.Parent == game.Workspace then
		return false
	else
		return isInMyArea(part.Parent)
	end
end

function configurationAdded(config, guiMain)
	if configTable[config] then
		return
	end

	waitForChild(Tool,&quot;IsRestricted&quot;)
	if Tool.IsRestricted.Value and not isInMyArea(config) then
		return	
	end
	
	local data = {}
	data.Configuration = config
	data.VisualAnnotation = createVisualAnnotation(config, guiMain)
	if config:IsA(&quot;Configuration&quot;) then
		data.Connection = config.AncestryChanged:connect(function(child, newParent) if child == config then configurationParentChanged(data, newParent) end end)
		configurationParentChanged(data, config.Parent)
	else
		configurationParentChanged(data, config)
	end

	configTable[config] = data
end

function configurationRemoved(config)
	local data = configTable[config]	
	if not(data) then
		--I have no opinion about this
		return
	end

	if data.Connection then
		data.Connection:disconnect()
	end

	data.VisualAnnotation:Remove()
	
	configTable[config] = nil
end

local ServiceConnections

function findVehicleSeats(object, guiMain)
	if object:IsA(&quot;VehicleSeat&quot;) then
		configurationAdded(object, guiMain)
	end
	for index,child in pairs(object:GetChildren()) do
		findVehicleSeats(child, guiMain)
	end
end

function setUpConfigurationService(guiMain)
	ServiceConnections = {}
	local collectionService = game:GetService(&quot;CollectionService&quot;)

	ServiceConnections[#ServiceConnections+1] = collectionService.ItemAdded:connect(function(instance) if instance:IsA(&quot;Configuration&quot;) then configurationAdded(instance, guiMain) end end)
	ServiceConnections[#ServiceConnections+1] = collectionService.ItemRemoved:connect(function(instance) if instance:IsA(&quot;Configuration&quot;) then configurationRemoved(instance) end end)

	local configs = collectionService:GetCollection(&quot;Configuration&quot;)
	if configs then
		for pos, config in pairs(configs) do
			configurationAdded(config, guiMain)
		end
	end

	ServiceConnections[#ServiceConnections+1] = game.workspace.DescendantAdded:connect(function(instance) if instance:IsA(&quot;VehicleSeat&quot;) then configurationAdded(instance, guiMain) end end)
	ServiceConnections[#ServiceConnections+1] = game.workspace.DescendantRemoving:connect(function(instance) if instance:IsA(&quot;VehicleSeat&quot;) then configurationRemoved(instance) end end)
	findVehicleSeats(game.workspace, guiMain)

end

function destroyConfigurationService()
	for config, data in pairs(configTable) do
		configurationRemoved(config)
	end
	for index, connection in pairs(ServiceConnections) do
		connection:disconnect()
	end
	ServiceConnections = {}
end


Tool.Equipped:connect(onEquippedLocal)
Tool.Unequipped:connect(onUnequippedLocal)</ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX5">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Repositioner</string>
				<ProtectedString name="Source">local frame = script.Parent.Frame
local screen = script.Parent

function repositionGui()
	frame.Position = UDim2.new(frame.Position.X.Scale,frame.Position.X.Offset,1,-frame.AbsoluteSize.y - screen.AbsoluteSize.y/7)
end

screen.Changed:connect(function()
	repositionGui()
end)

repositionGui()</ProtectedString>
			</Properties>
		</Item>
		<Item class="BoolValue" referent="RBX6">
			<Properties>
				<bool name="Archivable">true</bool>
				<string name="Name">IsRestricted</string>
				<bool name="Value">false</bool>
			</Properties>
		</Item>
	</Item>
</roblox>